{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0","program":"/Users/elton/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","tokio_util","--edition=2018","/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"codec\"","-C","metadata=25235871f67fc5c6","-C","extra-filename=-25235871f67fc5c6","--out-dir","/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps","-L","dependency=/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps","--extern","bytes=/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps/libbytes-53f0a59b17d296b7.rmeta","--extern","futures_core=/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps/libfutures_core-16d5bab9731d1177.rmeta","--extern","futures_sink=/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps/libfutures_sink-fadf91b16d4ca1c9.rmeta","--extern","log=/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps/liblog-5574c275dcdd9932.rmeta","--extern","pin_project_lite=/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps/libpin_project_lite-920fd103012f96d7.rmeta","--extern","tokio=/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps/libtokio-03413798d160148f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/elton/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Volumes/data/study/rust/actix3-study/hello/target/rls/debug/deps/libtokio_util-25235871f67fc5c6.rmeta"},"prelude":{"crate_id":{"name":"tokio_util","disambiguator":[13710651070631072188,10573274358282039055]},"crate_root":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src","external_crates":[{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14920118443260649468,6799873627142870961]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1844954537018218648,16570159001010767920]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16437105423049283034,13312228696766436902]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13569262031960136914,926278369663005569]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9065077540001280346,5972367981040449865]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7013975980446320719,4024400865057542973]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17617311883804814182,13753176117248034829]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[10627003420787933698,8372112224406474813]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17821317327494065584,13808099233817094080]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[15423047965231407403,416074916754657818]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[13820017895795527141,8230108407990713412]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[1402496660407379612,10608574961827181449]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17535701131653633025,17299066394660958529]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[4797083768912782472,17265154906292509739]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","num":15,"id":{"name":"bytes","disambiguator":[10857486754465809394,2433770276971163535]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":16,"id":{"name":"tokio","disambiguator":[5895825235224374884,16159492256801080564]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","num":17,"id":{"name":"pin_project_lite","disambiguator":[13176939254456016097,11499618062034899473]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","num":18,"id":{"name":"futures_core","disambiguator":[5302043164941903801,13561415477671954157]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":19,"id":{"name":"mio","disambiguator":[72227356245223529,5107389993324937765]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":20,"id":{"name":"net2","disambiguator":[17827041454443753877,1991220346079697041]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":21,"id":{"name":"libc","disambiguator":[2106072727114840833,17336729488627243165]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":22,"id":{"name":"cfg_if","disambiguator":[17559781862561062301,5532089208612334984]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":23,"id":{"name":"iovec","disambiguator":[13734841925567962986,18254909768561204474]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":24,"id":{"name":"slab","disambiguator":[8448618339644090097,4647731729882876830]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","num":25,"id":{"name":"log","disambiguator":[15831985723634696542,14165902014935613976]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":26,"id":{"name":"lazy_static","disambiguator":[14839071252340993957,4173087639422160489]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":27,"id":{"name":"mio_uds","disambiguator":[17510465622054726757,9870874331978359532]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":28,"id":{"name":"memchr","disambiguator":[13441648339959567409,13136444195947382762]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":29,"id":{"name":"signal_hook_registry","disambiguator":[9322584015677656356,1299352647417726002]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","num":30,"id":{"name":"arc_swap","disambiguator":[2042550651081528561,13786377003224899017]}},{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","num":31,"id":{"name":"futures_sink","disambiguator":[12407528913905879339,18367108519250370665]}}],"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","byte_start":0,"byte_end":494,"line_start":1,"line_end":26,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":453},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485318,"byte_end":6485328,"line_start":13,"line_end":13,"column_start":28,"column_end":38},"alias_span":null,"name":"BytesCodec","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485367,"byte_end":6485374,"line_start":16,"line_end":16,"column_start":24,"column_end":31},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485413,"byte_end":6485420,"line_start":19,"line_end":19,"column_start":24,"column_end":31},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":772},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485458,"byte_end":6485464,"line_start":22,"line_end":22,"column_start":24,"column_end":30},"alias_span":null,"name":"Framed","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":481},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485466,"byte_end":6485477,"line_start":22,"line_end":22,"column_start":32,"column_end":43},"alias_span":null,"name":"FramedParts","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":686},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485525,"byte_end":6485535,"line_start":25,"line_end":25,"column_start":28,"column_end":38},"alias_span":null,"name":"FramedRead","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":600},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485584,"byte_end":6485595,"line_start":28,"line_end":28,"column_start":29,"column_end":40},"alias_span":null,"name":"FramedWrite","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":505},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485657,"byte_end":6485677,"line_start":31,"line_end":31,"column_start":34,"column_end":54},"alias_span":null,"name":"LengthDelimitedCodec","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":364},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485679,"byte_end":6485704,"line_start":31,"line_end":31,"column_start":56,"column_end":81},"alias_span":null,"name":"LengthDelimitedCodecError","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":521},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485753,"byte_end":6485763,"line_start":34,"line_end":34,"column_start":29,"column_end":39},"alias_span":null,"name":"LinesCodec","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485765,"byte_end":6485780,"line_start":34,"line_end":34,"column_start":41,"column_end":56},"alias_span":null,"name":"LinesCodecError","value":"","parent":{"krate":0,"index":6}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","byte_start":0,"byte_end":494,"line_start":1,"line_end":26,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6}],"decl_id":null,"docs":" Utilities for working with Tokio.\n","sig":null,"attributes":[{"value":"warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","byte_start":60,"byte_end":166,"line_start":2,"line_end":7,"column_start":1,"column_end":3}},{"value":"deny(intra_doc_link_resolution_failure)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","byte_start":167,"byte_end":210,"line_start":8,"line_end":8,"column_start":1,"column_end":44}},{"value":"! Utilities for working with Tokio.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","byte_start":368,"byte_end":405,"line_start":15,"line_end":15,"column_start":1,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"codec","qualname":"::codec","value":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"decl_id":null,"docs":" Utilities for encoding and decoding frames.","sig":null,"attributes":[{"value":"cfg(feature = \"codec\")","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/cfg.rs","byte_start":570,"byte_end":595,"line_start":4,"line_end":4,"column_start":13,"column_end":38}},{"value":"! Utilities for encoding and decoding frames.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6484716,"byte_end":6484763,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6484764,"byte_end":6484767,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Contains adapters to go from streams of bytes, [`AsyncRead`] and","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6484768,"byte_end":6484836,"line_start":3,"line_end":3,"column_start":1,"column_end":69}},{"value":"! [`AsyncWrite`], to framed streams implementing [`Sink`] and [`Stream`].","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6484837,"byte_end":6484912,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"! Framed streams are also known as transports.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6484913,"byte_end":6484961,"line_start":5,"line_end":5,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6484962,"byte_end":6484965,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! [`AsyncRead`]: https://docs.rs/tokio/*/tokio/io/trait.AsyncRead.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6484966,"byte_end":6485038,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! [`AsyncWrite`]: https://docs.rs/tokio/*/tokio/io/trait.AsyncWrite.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485039,"byte_end":6485113,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"! [`Sink`]: https://docs.rs/futures-sink/*/futures_sink/trait.Sink.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485114,"byte_end":6485187,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"! [`Stream`]: https://docs.rs/futures-core/*/futures_core/stream/trait.Stream.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485188,"byte_end":6485272,"line_start":10,"line_end":10,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":453},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486063,"byte_end":6486073,"line_start":9,"line_end":9,"column_start":12,"column_end":22},"name":"BytesCodec","qualname":"::codec::bytes_codec::BytesCodec","value":"","parent":null,"children":[],"decl_id":null,"docs":" A simple `Codec` implementation that just ships bytes around.\n","sig":null,"attributes":[{"value":"/ A simple `Codec` implementation that just ships bytes around.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6485909,"byte_end":6485974,"line_start":7,"line_end":7,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486175,"byte_end":6486178,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"new","qualname":"<BytesCodec>::new","value":"pub fn new() -> BytesCodec","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesCodec` for shipping around raw bytes.\n","sig":null,"attributes":[{"value":"/ Creates a new `BytesCodec` for shipping around raw bytes.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486102,"byte_end":6486163,"line_start":12,"line_end":12,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487452,"byte_end":6487459,"line_start":19,"line_end":19,"column_start":11,"column_end":18},"name":"Decoder","qualname":"::codec::decoder::Decoder","value":"Decoder","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Decoding of frames via buffers.","sig":null,"attributes":[{"value":"/ Decoding of frames via buffers.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6486945,"byte_end":6486980,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6486981,"byte_end":6486984,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This trait is used when constructing an instance of `Framed` or","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6486985,"byte_end":6487052,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ `FramedRead`. An implementation of `Decoder` takes a byte stream that has","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487053,"byte_end":6487130,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ already been buffered in `src` and decodes the data into a stream of","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487131,"byte_end":6487203,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ `Self::Item` frames.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487204,"byte_end":6487228,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487229,"byte_end":6487232,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Implementations are able to track state on `self`, which enables","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487233,"byte_end":6487301,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ implementing stateful streaming parsers. In many cases, though, this type","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487302,"byte_end":6487379,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ will simply be a unit struct (e.g. `struct HttpDecoder`).","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487380,"byte_end":6487441,"line_start":18,"line_end":18,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":35},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487507,"byte_end":6487511,"line_start":21,"line_end":21,"column_start":10,"column_end":14},"name":"Item","qualname":"::codec::decoder::Decoder::Item","value":"type Item;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" The type of decoded frames.\n","sig":null,"attributes":[{"value":"/ The type of decoded frames.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487466,"byte_end":6487497,"line_start":20,"line_end":20,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488218,"byte_end":6488223,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"name":"Error","qualname":"::codec::decoder::Decoder::Error","value":"type Error: From<io::Error>;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" The type of unrecoverable frame decoding errors.","sig":null,"attributes":[{"value":"/ The type of unrecoverable frame decoding errors.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487518,"byte_end":6487570,"line_start":23,"line_end":23,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487575,"byte_end":6487578,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ If an individual message is ill-formed but can be ignored without","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487583,"byte_end":6487652,"line_start":25,"line_end":25,"column_start":5,"column_end":74}},{"value":"/ interfering with the processing of future messages, it may be more","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487657,"byte_end":6487727,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ useful to report the failure as an `Item`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487732,"byte_end":6487778,"line_start":27,"line_end":27,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487783,"byte_end":6487786,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ `From<io::Error>` is required in the interest of making `Error` suitable","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487791,"byte_end":6487867,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"/ for returning directly from a `FramedRead`, and to enable the default","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487872,"byte_end":6487945,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ implementation of `decode_eof` to yield an `io::Error` when the decoder","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6487950,"byte_end":6488025,"line_start":31,"line_end":31,"column_start":5,"column_end":80}},{"value":"/ fails to consume all available data.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488030,"byte_end":6488070,"line_start":32,"line_end":32,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488075,"byte_end":6488078,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ Note that implementors of this trait can simply indicate `type Error =","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488083,"byte_end":6488157,"line_start":34,"line_end":34,"column_start":5,"column_end":79}},{"value":"/ io::Error` to use I/O errors as this type.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488162,"byte_end":6488208,"line_start":35,"line_end":35,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491056,"byte_end":6491062,"line_start":103,"line_end":103,"column_start":8,"column_end":14},"name":"decode","qualname":"::codec::decoder::Decoder::decode","value":"pub fn decode(&mut Self, &mut BytesMut)\n-> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Attempts to decode a frame from the provided buffer of bytes.","sig":null,"attributes":[{"value":"/ Attempts to decode a frame from the provided buffer of bytes.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488247,"byte_end":6488312,"line_start":38,"line_end":38,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488317,"byte_end":6488320,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ This method is called by `FramedRead` whenever bytes are ready to be","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488325,"byte_end":6488397,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ parsed.  The provided buffer of bytes is what's been read so far, and","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488402,"byte_end":6488475,"line_start":41,"line_end":41,"column_start":5,"column_end":78}},{"value":"/ this instance of `Decode` can determine whether an entire frame is in","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488480,"byte_end":6488553,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ the buffer and is ready to be returned.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488558,"byte_end":6488601,"line_start":43,"line_end":43,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488606,"byte_end":6488609,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ If an entire frame is available, then this instance will remove those","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488614,"byte_end":6488687,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ bytes from the buffer provided and return them as a decoded","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488692,"byte_end":6488755,"line_start":46,"line_end":46,"column_start":5,"column_end":68}},{"value":"/ frame. Note that removing bytes from the provided buffer doesn't always","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488760,"byte_end":6488835,"line_start":47,"line_end":47,"column_start":5,"column_end":80}},{"value":"/ necessarily copy the bytes, so this should be an efficient operation in","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488840,"byte_end":6488915,"line_start":48,"line_end":48,"column_start":5,"column_end":80}},{"value":"/ most circumstances.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488920,"byte_end":6488943,"line_start":49,"line_end":49,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488948,"byte_end":6488951,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ If the bytes look valid, but a frame isn't fully available yet, then","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6488956,"byte_end":6489028,"line_start":51,"line_end":51,"column_start":5,"column_end":77}},{"value":"/ `Ok(None)` is returned. This indicates to the `Framed` instance that","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489033,"byte_end":6489105,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ it needs to read some more bytes before calling this method again.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489110,"byte_end":6489180,"line_start":53,"line_end":53,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489185,"byte_end":6489188,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Note that the bytes provided may be empty. If a previous call to","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489193,"byte_end":6489261,"line_start":55,"line_end":55,"column_start":5,"column_end":73}},{"value":"/ `decode` consumed all the bytes in the buffer then `decode` will be","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489266,"byte_end":6489337,"line_start":56,"line_end":56,"column_start":5,"column_end":76}},{"value":"/ called again until it returns `Ok(None)`, indicating that more bytes need to","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489342,"byte_end":6489422,"line_start":57,"line_end":57,"column_start":5,"column_end":85}},{"value":"/ be read.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489427,"byte_end":6489439,"line_start":58,"line_end":58,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489444,"byte_end":6489447,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Finally, if the bytes in the buffer are malformed then an error is","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489452,"byte_end":6489522,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ returned indicating why. This informs `Framed` that the stream is now","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489527,"byte_end":6489600,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ corrupt and should be terminated.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489605,"byte_end":6489642,"line_start":62,"line_end":62,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489647,"byte_end":6489650,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Buffer management","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489655,"byte_end":6489678,"line_start":64,"line_end":64,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489683,"byte_end":6489686,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Before returning from the function, implementations should ensure that","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489691,"byte_end":6489765,"line_start":66,"line_end":66,"column_start":5,"column_end":79}},{"value":"/ the buffer has appropriate capacity in anticipation of future calls to","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489770,"byte_end":6489844,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/ `decode`. Failing to do so leads to inefficiency.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489849,"byte_end":6489902,"line_start":68,"line_end":68,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489907,"byte_end":6489910,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ For example, if frames have a fixed length, or if the length of the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489915,"byte_end":6489986,"line_start":70,"line_end":70,"column_start":5,"column_end":76}},{"value":"/ current frame is known from a header, a possible buffer management","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6489991,"byte_end":6490061,"line_start":71,"line_end":71,"column_start":5,"column_end":75}},{"value":"/ strategy is:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490066,"byte_end":6490082,"line_start":72,"line_end":72,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490087,"byte_end":6490090,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490095,"byte_end":6490108,"line_start":74,"line_end":74,"column_start":5,"column_end":18}},{"value":"/ # use std::io;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490113,"byte_end":6490131,"line_start":75,"line_end":75,"column_start":5,"column_end":23}},{"value":"/ #","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490136,"byte_end":6490141,"line_start":76,"line_end":76,"column_start":5,"column_end":10}},{"value":"/ # use bytes::BytesMut;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490146,"byte_end":6490172,"line_start":77,"line_end":77,"column_start":5,"column_end":31}},{"value":"/ # use tokio_util::codec::Decoder;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490177,"byte_end":6490214,"line_start":78,"line_end":78,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490219,"byte_end":6490224,"line_start":79,"line_end":79,"column_start":5,"column_end":10}},{"value":"/ # struct MyCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490229,"byte_end":6490250,"line_start":80,"line_end":80,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490255,"byte_end":6490260,"line_start":81,"line_end":81,"column_start":5,"column_end":10}},{"value":"/ impl Decoder for MyCodec {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490265,"byte_end":6490295,"line_start":82,"line_end":82,"column_start":5,"column_end":35}},{"value":"/     // ...","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490300,"byte_end":6490314,"line_start":83,"line_end":83,"column_start":5,"column_end":19}},{"value":"/     # type Item = BytesMut;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490319,"byte_end":6490350,"line_start":84,"line_end":84,"column_start":5,"column_end":36}},{"value":"/     # type Error = io::Error;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490355,"byte_end":6490388,"line_start":85,"line_end":85,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490393,"byte_end":6490396,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/     fn decode(&mut self, src: &mut BytesMut) -> Result<Option<Self::Item>, Self::Error> {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490401,"byte_end":6490494,"line_start":87,"line_end":87,"column_start":5,"column_end":98}},{"value":"/         // ...","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490499,"byte_end":6490517,"line_start":88,"line_end":88,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490522,"byte_end":6490525,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/         // Reserve enough to complete decoding of the current frame.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490530,"byte_end":6490602,"line_start":90,"line_end":90,"column_start":5,"column_end":77}},{"value":"/         let current_frame_len: usize = 1000; // Example.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490607,"byte_end":6490667,"line_start":91,"line_end":91,"column_start":5,"column_end":65}},{"value":"/         // And to start decoding the next frame.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490672,"byte_end":6490724,"line_start":92,"line_end":92,"column_start":5,"column_end":57}},{"value":"/         let next_frame_header_len: usize = 10; // Example.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490729,"byte_end":6490791,"line_start":93,"line_end":93,"column_start":5,"column_end":67}},{"value":"/         src.reserve(current_frame_len + next_frame_header_len);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490796,"byte_end":6490863,"line_start":94,"line_end":94,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490868,"byte_end":6490871,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/         return Ok(None);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490876,"byte_end":6490904,"line_start":96,"line_end":96,"column_start":5,"column_end":33}},{"value":"/     }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490909,"byte_end":6490918,"line_start":97,"line_end":97,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490923,"byte_end":6490928,"line_start":98,"line_end":98,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490933,"byte_end":6490940,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490945,"byte_end":6490948,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ An optimal buffer management strategy minimizes reallocations and","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6490953,"byte_end":6491022,"line_start":101,"line_end":101,"column_start":5,"column_end":74}},{"value":"/ over-allocations.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491027,"byte_end":6491048,"line_start":102,"line_end":102,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491921,"byte_end":6491931,"line_start":118,"line_end":118,"column_start":8,"column_end":18},"name":"decode_eof","qualname":"::codec::decoder::Decoder::decode_eof","value":"pub fn decode_eof(&mut Self, &mut BytesMut)\n-> Result<Option<Self::Item>, Self::Error>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" A default method available to be called when there are no more bytes\n available to be read from the underlying I/O.","sig":null,"attributes":[{"value":"/ A default method available to be called when there are no more bytes","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491143,"byte_end":6491215,"line_start":105,"line_end":105,"column_start":5,"column_end":77}},{"value":"/ available to be read from the underlying I/O.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491220,"byte_end":6491269,"line_start":106,"line_end":106,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491274,"byte_end":6491277,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This method defaults to calling `decode` and returns an error if","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491282,"byte_end":6491350,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` is returned while there is unconsumed data in `buf`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491355,"byte_end":6491422,"line_start":109,"line_end":109,"column_start":5,"column_end":72}},{"value":"/ Typically this doesn't need to be implemented unless the framing","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491427,"byte_end":6491495,"line_start":110,"line_end":110,"column_start":5,"column_end":73}},{"value":"/ protocol differs near the end of the stream.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491500,"byte_end":6491548,"line_start":111,"line_end":111,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491553,"byte_end":6491556,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Note that the `buf` argument may be empty. If a previous call to","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491561,"byte_end":6491629,"line_start":113,"line_end":113,"column_start":5,"column_end":73}},{"value":"/ `decode_eof` consumed all the bytes in the buffer, `decode_eof` will be","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491634,"byte_end":6491709,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/ called again until it returns `None`, indicating that there are no more","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491714,"byte_end":6491789,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ frames to yield. This behavior enables returning finalization frames","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491794,"byte_end":6491866,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ that may not be based on inbound data.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6491871,"byte_end":6491913,"line_start":117,"line_end":117,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6493406,"byte_end":6493412,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"framed","qualname":"::codec::decoder::Decoder::framed","value":"pub fn framed<T: AsyncRead + AsyncWrite + Sized>(Self, T) -> Framed<T, Self>\nwhere Self: Encoder + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Provides a `Stream` and `Sink` interface for reading and writing to this\n `Io` object, using `Decode` and `Encode` to read and write the raw data.","sig":null,"attributes":[{"value":"/ Provides a `Stream` and `Sink` interface for reading and writing to this","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492349,"byte_end":6492425,"line_start":131,"line_end":131,"column_start":5,"column_end":81}},{"value":"/ `Io` object, using `Decode` and `Encode` to read and write the raw data.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492430,"byte_end":6492506,"line_start":132,"line_end":132,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492511,"byte_end":6492514,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492519,"byte_end":6492594,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492599,"byte_end":6492669,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the `Codec`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492674,"byte_end":6492745,"line_start":136,"line_end":136,"column_start":5,"column_end":76}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492750,"byte_end":6492822,"line_start":137,"line_end":137,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492827,"byte_end":6492885,"line_start":138,"line_end":138,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492890,"byte_end":6492893,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both `Stream` and","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492898,"byte_end":6492967,"line_start":140,"line_end":140,"column_start":5,"column_end":74}},{"value":"/ `Sink`; grouping this into a single object is often useful for layering","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6492972,"byte_end":6493047,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6493052,"byte_end":6493128,"line_start":142,"line_end":142,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6493133,"byte_end":6493155,"line_start":143,"line_end":143,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6493160,"byte_end":6493163,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6493168,"byte_end":6493241,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ calling `split` on the `Framed` returned by this method, which will","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6493246,"byte_end":6493317,"line_start":146,"line_end":146,"column_start":5,"column_end":76}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/decoder.rs","byte_start":6493322,"byte_end":6493398,"line_start":147,"line_end":147,"column_start":5,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493703,"byte_end":6493710,"line_start":6,"line_end":6,"column_start":11,"column_end":18},"name":"Encoder","qualname":"::codec::encoder::Encoder","value":"Encoder","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" Trait of helper objects to write out messages as bytes, for use with\n `FramedWrite`.\n","sig":null,"attributes":[{"value":"/ Trait of helper objects to write out messages as bytes, for use with","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493601,"byte_end":6493673,"line_start":4,"line_end":4,"column_start":1,"column_end":73}},{"value":"/ `FramedWrite`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493674,"byte_end":6493692,"line_start":5,"line_end":5,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493774,"byte_end":6493778,"line_start":8,"line_end":8,"column_start":10,"column_end":14},"name":"Item","qualname":"::codec::encoder::Encoder::Item","value":"type Item;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" The type of items consumed by the `Encoder`\n","sig":null,"attributes":[{"value":"/ The type of items consumed by the `Encoder`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493717,"byte_end":6493764,"line_start":7,"line_end":7,"column_start":5,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493976,"byte_end":6493981,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"name":"Error","qualname":"::codec::encoder::Encoder::Error","value":"type Error: From<io::Error>;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" The type of encoding errors.","sig":null,"attributes":[{"value":"/ The type of encoding errors.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493785,"byte_end":6493817,"line_start":10,"line_end":10,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493822,"byte_end":6493825,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ `FramedWrite` requires `Encoder`s errors to implement `From<io::Error>`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493830,"byte_end":6493905,"line_start":12,"line_end":12,"column_start":5,"column_end":80}},{"value":"/ in the interest letting it return `Error`s directly.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6493910,"byte_end":6493966,"line_start":13,"line_end":13,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6494266,"byte_end":6494272,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"encode","qualname":"::codec::encoder::Encoder::encode","value":"pub fn encode(&mut Self, Self::Item, &mut BytesMut) -> Result<(), Self::Error>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Encodes a frame into the buffer provided.","sig":null,"attributes":[{"value":"/ Encodes a frame into the buffer provided.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6494005,"byte_end":6494050,"line_start":16,"line_end":16,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6494055,"byte_end":6494058,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ This method will encode `item` into the byte buffer provided by `dst`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6494063,"byte_end":6494137,"line_start":18,"line_end":18,"column_start":5,"column_end":79}},{"value":"/ The `dst` provided is an internal buffer of the `Framed` instance and","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6494142,"byte_end":6494215,"line_start":19,"line_end":19,"column_start":5,"column_end":78}},{"value":"/ will be written out when possible.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/encoder.rs","byte_start":6494220,"byte_end":6494258,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":772},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6495177,"byte_end":6495183,"line_start":23,"line_end":23,"column_start":16,"column_end":22},"name":"Framed","qualname":"::codec::framed::Framed","value":"Framed {  }","parent":null,"children":[{"krate":0,"index":775}],"decl_id":null,"docs":" A unified `Stream` and `Sink` interface to an underlying I/O object, using\n the `Encoder` and `Decoder` traits to encode and decode frames.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":81},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6495619,"byte_end":6495621,"line_start":40,"line_end":40,"column_start":10,"column_end":12},"name":"Io","qualname":"::codec::framed::ProjectFuse::Io","value":"type Io;","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":82},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6495632,"byte_end":6495637,"line_start":41,"line_end":41,"column_start":10,"column_end":15},"name":"Codec","qualname":"::codec::framed::ProjectFuse::Codec","value":"type Codec;","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497172,"byte_end":6497175,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<Framed<T, U>>::new","value":"pub fn new(T, U) -> Framed<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Provides a `Stream` and `Sink` interface for reading and writing to this\n `Io` object, using `Decode` and `Encode` to read and write the raw data.","sig":null,"attributes":[{"value":"/ Provides a `Stream` and `Sink` interface for reading and writing to this","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496111,"byte_end":6496187,"line_start":64,"line_end":64,"column_start":5,"column_end":81}},{"value":"/ `Io` object, using `Decode` and `Encode` to read and write the raw data.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496192,"byte_end":6496268,"line_start":65,"line_end":65,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496273,"byte_end":6496276,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496281,"byte_end":6496356,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496361,"byte_end":6496431,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the `Codec`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496436,"byte_end":6496507,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496512,"byte_end":6496584,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496589,"byte_end":6496647,"line_start":71,"line_end":71,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496652,"byte_end":6496655,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both `Stream` and","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496660,"byte_end":6496729,"line_start":73,"line_end":73,"column_start":5,"column_end":74}},{"value":"/ `Sink`; grouping this into a single object is often useful for layering","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496734,"byte_end":6496809,"line_start":74,"line_end":74,"column_start":5,"column_end":80}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496814,"byte_end":6496890,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496895,"byte_end":6496917,"line_start":76,"line_end":76,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496922,"byte_end":6496925,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496930,"byte_end":6497003,"line_start":78,"line_end":78,"column_start":5,"column_end":78}},{"value":"/ calling `split` on the `Framed` returned by this method, which will","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497008,"byte_end":6497079,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497084,"byte_end":6497160,"line_start":80,"line_end":80,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498588,"byte_end":6498598,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Framed<T, U>>::from_parts","value":"pub fn from_parts(FramedParts<T, U>) -> Framed<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Provides a `Stream` and `Sink` interface for reading and writing to this\n `Io` object, using `Decode` and `Encode` to read and write the raw data.","sig":null,"attributes":[{"value":"/ Provides a `Stream` and `Sink` interface for reading and writing to this","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497355,"byte_end":6497431,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ `Io` object, using `Decode` and `Encode` to read and write the raw data.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497436,"byte_end":6497512,"line_start":90,"line_end":90,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497517,"byte_end":6497520,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497525,"byte_end":6497600,"line_start":92,"line_end":92,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497605,"byte_end":6497675,"line_start":93,"line_end":93,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the `Codec`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497680,"byte_end":6497751,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497756,"byte_end":6497828,"line_start":95,"line_end":95,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497833,"byte_end":6497891,"line_start":96,"line_end":96,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497896,"byte_end":6497899,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both `Stream` and","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497904,"byte_end":6497973,"line_start":98,"line_end":98,"column_start":5,"column_end":74}},{"value":"/ `Sink`; grouping this into a single object is often useful for layering","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497978,"byte_end":6498053,"line_start":99,"line_end":99,"column_start":5,"column_end":80}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498058,"byte_end":6498134,"line_start":100,"line_end":100,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498139,"byte_end":6498161,"line_start":101,"line_end":101,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498166,"byte_end":6498169,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This objects takes a stream and a readbuffer and a writebuffer. These field","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498174,"byte_end":6498253,"line_start":103,"line_end":103,"column_start":5,"column_end":84}},{"value":"/ can be obtained from an existing `Framed` with the `into_parts` method.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498258,"byte_end":6498333,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498338,"byte_end":6498341,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498346,"byte_end":6498419,"line_start":106,"line_end":106,"column_start":5,"column_end":78}},{"value":"/ calling `split` on the `Framed` returned by this method, which will","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498424,"byte_end":6498495,"line_start":107,"line_end":107,"column_start":5,"column_end":76}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6498500,"byte_end":6498576,"line_start":108,"line_end":108,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499286,"byte_end":6499293,"line_start":130,"line_end":130,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Framed<T, U>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by\n `Frame`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499004,"byte_end":6499067,"line_start":124,"line_end":124,"column_start":5,"column_end":68}},{"value":"/ `Frame`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499072,"byte_end":6499084,"line_start":125,"line_end":125,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499089,"byte_end":6499092,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499097,"byte_end":6499172,"line_start":127,"line_end":127,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499177,"byte_end":6499247,"line_start":128,"line_end":128,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499252,"byte_end":6499274,"line_start":129,"line_end":129,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499653,"byte_end":6499660,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Framed<T, U>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `Frame`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499363,"byte_end":6499434,"line_start":134,"line_end":134,"column_start":5,"column_end":76}},{"value":"/ `Frame`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499439,"byte_end":6499451,"line_start":135,"line_end":135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499456,"byte_end":6499459,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499464,"byte_end":6499539,"line_start":137,"line_end":137,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499544,"byte_end":6499614,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499619,"byte_end":6499641,"line_start":139,"line_end":139,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499992,"byte_end":6499997,"line_start":149,"line_end":149,"column_start":12,"column_end":17},"name":"codec","qualname":"<Framed<T, U>>::codec","value":"pub fn codec(&Self) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying codec wrapped by\n `Frame`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying codec wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499742,"byte_end":6499800,"line_start":144,"line_end":144,"column_start":5,"column_end":63}},{"value":"/ `Frame`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499805,"byte_end":6499817,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499822,"byte_end":6499825,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying codec","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499830,"byte_end":6499904,"line_start":147,"line_end":147,"column_start":5,"column_end":79}},{"value":"/ as it may corrupt the stream of frames otherwise being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6499909,"byte_end":6499980,"line_start":148,"line_end":148,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500328,"byte_end":6500337,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"codec_mut","qualname":"<Framed<T, U>>::codec_mut","value":"pub fn codec_mut(&mut Self) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying codec wrapped by\n `Frame`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying codec wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500070,"byte_end":6500136,"line_start":153,"line_end":153,"column_start":5,"column_end":71}},{"value":"/ `Frame`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500141,"byte_end":6500153,"line_start":154,"line_end":154,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500158,"byte_end":6500161,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying codec","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500166,"byte_end":6500240,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/ as it may corrupt the stream of frames otherwise being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500245,"byte_end":6500316,"line_start":157,"line_end":157,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500477,"byte_end":6500488,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"read_buffer","qualname":"<Framed<T, U>>::read_buffer","value":"pub fn read_buffer(&Self) -> &BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the read buffer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the read buffer.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500422,"byte_end":6500465,"line_start":162,"line_end":162,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500814,"byte_end":6500824,"line_start":172,"line_end":172,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Framed<T, U>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Frame`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `Frame`, returning its underlying I/O stream.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500550,"byte_end":6500612,"line_start":167,"line_end":167,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500617,"byte_end":6500620,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500625,"byte_end":6500700,"line_start":169,"line_end":169,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500705,"byte_end":6500775,"line_start":170,"line_end":170,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500780,"byte_end":6500802,"line_start":171,"line_end":171,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501218,"byte_end":6501228,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<Framed<T, U>>::into_parts","value":"pub fn into_parts(Self) -> FramedParts<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Frame`, returning its underlying I/O stream, the buffer\n with unprocessed data, and the codec.","sig":null,"attributes":[{"value":"/ Consumes the `Frame`, returning its underlying I/O stream, the buffer","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500897,"byte_end":6500970,"line_start":176,"line_end":176,"column_start":5,"column_end":78}},{"value":"/ with unprocessed data, and the codec.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6500975,"byte_end":6501016,"line_start":177,"line_end":177,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501021,"byte_end":6501024,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501029,"byte_end":6501104,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501109,"byte_end":6501179,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501184,"byte_end":6501206,"line_start":181,"line_end":181,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":481},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505579,"byte_end":6505590,"line_start":342,"line_end":342,"column_start":12,"column_end":23},"name":"FramedParts","qualname":"::codec::framed::FramedParts","value":"FramedParts { io, codec, read_buf, write_buf }","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"decl_id":null,"docs":" `FramedParts` contains an export of the data of a Framed transport.\n It can be used to construct a new `Framed` with a different codec.\n It contains all current buffers and the inner transport.\n","sig":null,"attributes":[{"value":"/ `FramedParts` contains an export of the data of a Framed transport.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505347,"byte_end":6505418,"line_start":338,"line_end":338,"column_start":1,"column_end":72}},{"value":"/ It can be used to construct a new `Framed` with a different codec.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505419,"byte_end":6505489,"line_start":339,"line_end":339,"column_start":1,"column_end":71}},{"value":"/ It contains all current buffers and the inner transport.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505490,"byte_end":6505550,"line_start":340,"line_end":340,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":484},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505676,"byte_end":6505678,"line_start":344,"line_end":344,"column_start":9,"column_end":11},"name":"io","qualname":"::codec::framed::FramedParts::io","value":"T","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" The inner transport used to read bytes to and write bytes to\n","sig":null,"attributes":[{"value":"/ The inner transport used to read bytes to and write bytes to","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505603,"byte_end":6505667,"line_start":343,"line_end":343,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":485},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505710,"byte_end":6505715,"line_start":347,"line_end":347,"column_start":9,"column_end":14},"name":"codec","qualname":"::codec::framed::FramedParts::codec","value":"U","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" The codec\n","sig":null,"attributes":[{"value":"/ The codec","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505688,"byte_end":6505701,"line_start":346,"line_end":346,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":486},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505780,"byte_end":6505788,"line_start":350,"line_end":350,"column_start":9,"column_end":17},"name":"read_buf","qualname":"::codec::framed::FramedParts::read_buf","value":"bytes::BytesMut","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" The buffer with read but unprocessed data.\n","sig":null,"attributes":[{"value":"/ The buffer with read but unprocessed data.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505725,"byte_end":6505771,"line_start":349,"line_end":349,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":487},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505875,"byte_end":6505884,"line_start":353,"line_end":353,"column_start":9,"column_end":18},"name":"write_buf","qualname":"::codec::framed::FramedParts::write_buf","value":"bytes::BytesMut","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" A buffer with unprocessed data which are not written yet.\n","sig":null,"attributes":[{"value":"/ A buffer with unprocessed data which are not written yet.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505805,"byte_end":6505866,"line_start":352,"line_end":352,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6506117,"byte_end":6506120,"line_start":362,"line_end":362,"column_start":12,"column_end":15},"name":"new","qualname":"<FramedParts<T, U>>::new","value":"pub fn new(T, U) -> FramedParts<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a new, default, `FramedParts`\n","sig":null,"attributes":[{"value":"/ Create a new, default, `FramedParts`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6506065,"byte_end":6506105,"line_start":361,"line_end":361,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":686},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6506719,"byte_end":6506729,"line_start":17,"line_end":17,"column_start":16,"column_end":26},"name":"FramedRead","qualname":"::codec::framed_read::FramedRead","value":"FramedRead {  }","parent":null,"children":[{"krate":0,"index":689}],"decl_id":null,"docs":" A `Stream` of messages decoded from an `AsyncRead`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507187,"byte_end":6507190,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<FramedRead<T, D>>::new","value":"pub fn new(T, D) -> FramedRead<T, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FramedRead` with the given `decoder`.\n","sig":null,"attributes":[{"value":"/ Creates a new `FramedRead` with the given `decoder`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507119,"byte_end":6507175,"line_start":42,"line_end":42,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507710,"byte_end":6507717,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<FramedRead<T, D>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by\n `FramedRead`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507423,"byte_end":6507486,"line_start":54,"line_end":54,"column_start":5,"column_end":68}},{"value":"/ `FramedRead`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507491,"byte_end":6507508,"line_start":55,"line_end":55,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507513,"byte_end":6507516,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507521,"byte_end":6507596,"line_start":57,"line_end":57,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507601,"byte_end":6507671,"line_start":58,"line_end":58,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507676,"byte_end":6507698,"line_start":59,"line_end":59,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508068,"byte_end":6508075,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<FramedRead<T, D>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `FramedRead`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507773,"byte_end":6507844,"line_start":64,"line_end":64,"column_start":5,"column_end":76}},{"value":"/ `FramedRead`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507849,"byte_end":6507866,"line_start":65,"line_end":65,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507871,"byte_end":6507874,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507879,"byte_end":6507954,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507959,"byte_end":6508029,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508034,"byte_end":6508056,"line_start":69,"line_end":69,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508412,"byte_end":6508422,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FramedRead<T, D>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `FramedRead`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `FramedRead`, returning its underlying I/O stream.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508143,"byte_end":6508210,"line_start":74,"line_end":74,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508215,"byte_end":6508218,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508223,"byte_end":6508298,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508303,"byte_end":6508373,"line_start":77,"line_end":77,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508378,"byte_end":6508400,"line_start":78,"line_end":78,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508537,"byte_end":6508544,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"decoder","qualname":"<FramedRead<T, D>>::decoder","value":"pub fn decoder(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying decoder.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying decoder.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508475,"byte_end":6508525,"line_start":83,"line_end":83,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508673,"byte_end":6508684,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"decoder_mut","qualname":"<FramedRead<T, D>>::decoder_mut","value":"pub fn decoder_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying decoder.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying decoder.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508603,"byte_end":6508661,"line_start":88,"line_end":88,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508810,"byte_end":6508821,"line_start":94,"line_end":94,"column_start":12,"column_end":23},"name":"read_buffer","qualname":"<FramedRead<T, D>>::read_buffer","value":"pub fn read_buffer(&Self) -> &BytesMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the read buffer.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the read buffer.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508755,"byte_end":6508798,"line_start":93,"line_end":93,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":600},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6514664,"byte_end":6514675,"line_start":20,"line_end":20,"column_start":16,"column_end":27},"name":"FramedWrite","qualname":"::codec::framed_write::FramedWrite","value":"FramedWrite {  }","parent":null,"children":[{"krate":0,"index":603}],"decl_id":null,"docs":" A `Sink` of frames encoded to an `AsyncWrite`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515115,"byte_end":6515118,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<FramedWrite<T, E>>::new","value":"pub fn new(T, E) -> FramedWrite<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `FramedWrite` with the given `encoder`.\n","sig":null,"attributes":[{"value":"/ Creates a new `FramedWrite` with the given `encoder`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515046,"byte_end":6515103,"line_start":42,"line_end":42,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515643,"byte_end":6515650,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<FramedWrite<T, E>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by\n `FramedWrite`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515355,"byte_end":6515418,"line_start":54,"line_end":54,"column_start":5,"column_end":68}},{"value":"/ `FramedWrite`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515423,"byte_end":6515441,"line_start":55,"line_end":55,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515446,"byte_end":6515449,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515454,"byte_end":6515529,"line_start":57,"line_end":57,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515534,"byte_end":6515604,"line_start":58,"line_end":58,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515609,"byte_end":6515631,"line_start":59,"line_end":59,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516002,"byte_end":6516009,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<FramedWrite<T, E>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `FramedWrite`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515706,"byte_end":6515777,"line_start":64,"line_end":64,"column_start":5,"column_end":76}},{"value":"/ `FramedWrite`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515782,"byte_end":6515800,"line_start":65,"line_end":65,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515805,"byte_end":6515808,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515813,"byte_end":6515888,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515893,"byte_end":6515963,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515968,"byte_end":6515990,"line_start":69,"line_end":69,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516347,"byte_end":6516357,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FramedWrite<T, E>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `FramedWrite`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `FramedWrite`, returning its underlying I/O stream.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516077,"byte_end":6516145,"line_start":74,"line_end":74,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516150,"byte_end":6516153,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516158,"byte_end":6516233,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516238,"byte_end":6516308,"line_start":77,"line_end":77,"column_start":5,"column_end":75}},{"value":"/ being worked with.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516313,"byte_end":6516335,"line_start":78,"line_end":78,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516472,"byte_end":6516479,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"encoder","qualname":"<FramedWrite<T, E>>::encoder","value":"pub fn encoder(&Self) -> &E","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying decoder.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying decoder.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516410,"byte_end":6516460,"line_start":83,"line_end":83,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516608,"byte_end":6516619,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"encoder_mut","qualname":"<FramedWrite<T, E>>::encoder_mut","value":"pub fn encoder_mut(&mut Self) -> &mut E","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying decoder.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying decoder.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516538,"byte_end":6516596,"line_start":88,"line_end":88,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":342},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"length_delimited","qualname":"::codec::length_delimited","value":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":493},{"krate":0,"index":503},{"krate":0,"index":501},{"krate":0,"index":500},{"krate":0,"index":364},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":519},{"krate":0,"index":517},{"krate":0,"index":516},{"krate":0,"index":366},{"krate":0,"index":373},{"krate":0,"index":377},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409}],"decl_id":null,"docs":" Frame a stream of bytes based on a length prefix","sig":null,"attributes":[{"value":"! Frame a stream of bytes based on a length prefix","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523059,"byte_end":6523111,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523112,"byte_end":6523115,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Many protocols delimit their frames by prefacing frame data with a","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523116,"byte_end":6523186,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"! frame head that specifies the length of the frame. The","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523187,"byte_end":6523245,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"! `length_delimited` module provides utilities for handling the length","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523246,"byte_end":6523318,"line_start":5,"line_end":5,"column_start":1,"column_end":73}},{"value":"! based framing. This allows the consumer to work with entire frames","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523319,"byte_end":6523389,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"! without having to worry about buffering or other framing logic.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523390,"byte_end":6523457,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523458,"byte_end":6523461,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Getting started","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523462,"byte_end":6523483,"line_start":9,"line_end":9,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523484,"byte_end":6523487,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! If implementing a protocol from scratch, using length delimited framing","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523488,"byte_end":6523563,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"! is an easy way to get started. [`LengthDelimitedCodec::new()`] will","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523564,"byte_end":6523635,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"! return a length delimited codec using default configuration values.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523636,"byte_end":6523707,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"! This can then be used to construct a framer to adapt a full-duplex","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523708,"byte_end":6523778,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"! byte stream into a stream of frames.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523779,"byte_end":6523819,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523820,"byte_end":6523823,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523824,"byte_end":6523831,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"! use tokio::io::{AsyncRead, AsyncWrite};","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523832,"byte_end":6523875,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"! use tokio_util::codec::{Framed, LengthDelimitedCodec};","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523876,"byte_end":6523934,"line_start":19,"line_end":19,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523935,"byte_end":6523938,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! fn bind_transport<T: AsyncRead + AsyncWrite>(io: T)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523939,"byte_end":6523994,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"!     -> Framed<T, LengthDelimitedCodec>","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6523995,"byte_end":6524037,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"! {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524038,"byte_end":6524043,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"!     Framed::new(io, LengthDelimitedCodec::new())","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524044,"byte_end":6524096,"line_start":24,"line_end":24,"column_start":1,"column_end":53}},{"value":"! }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524097,"byte_end":6524102,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"! # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524103,"byte_end":6524125,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524126,"byte_end":6524133,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524134,"byte_end":6524137,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! The returned transport implements `Sink + Stream` for `BytesMut`. It","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524138,"byte_end":6524210,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"! encodes the frame with a big-endian `u32` header denoting the frame","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524211,"byte_end":6524282,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"! payload length:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524283,"byte_end":6524302,"line_start":31,"line_end":31,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524303,"byte_end":6524306,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524307,"byte_end":6524318,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"! +----------+--------------------------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524319,"byte_end":6524368,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"! | len: u32 |          frame payload         |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524369,"byte_end":6524418,"line_start":35,"line_end":35,"column_start":1,"column_end":50}},{"value":"! +----------+--------------------------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524419,"byte_end":6524468,"line_start":36,"line_end":36,"column_start":1,"column_end":50}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524469,"byte_end":6524476,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524477,"byte_end":6524480,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! Specifically, given the following:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524481,"byte_end":6524519,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524520,"byte_end":6524523,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524524,"byte_end":6524531,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"! use tokio::prelude::*;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524532,"byte_end":6524558,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"! use tokio_util::codec::{Framed, LengthDelimitedCodec};","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524559,"byte_end":6524617,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524618,"byte_end":6524621,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! use futures::SinkExt;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524622,"byte_end":6524647,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"! use bytes::Bytes;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524648,"byte_end":6524669,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524670,"byte_end":6524673,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! async fn write_frame<T>(io: T) -> Result<(), Box<dyn std::error::Error>>","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524674,"byte_end":6524750,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"! where","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524751,"byte_end":6524760,"line_start":49,"line_end":49,"column_start":1,"column_end":10}},{"value":"!     T: AsyncRead + AsyncWrite + Unpin,","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524761,"byte_end":6524803,"line_start":50,"line_end":50,"column_start":1,"column_end":43}},{"value":"! {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524804,"byte_end":6524809,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"!     let mut transport = Framed::new(io, LengthDelimitedCodec::new());","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524810,"byte_end":6524883,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"!     let frame = Bytes::from(\"hello world\");","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524884,"byte_end":6524931,"line_start":53,"line_end":53,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524932,"byte_end":6524935,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"!     transport.send(frame).await?;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524936,"byte_end":6524973,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"!     Ok(())","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524974,"byte_end":6524988,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"! }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524989,"byte_end":6524994,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6524995,"byte_end":6525002,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525003,"byte_end":6525006,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! The encoded frame will look like this:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525007,"byte_end":6525049,"line_start":60,"line_end":60,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525050,"byte_end":6525053,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525054,"byte_end":6525065,"line_start":62,"line_end":62,"column_start":1,"column_end":12}},{"value":"! +---- len: u32 ----+---- data ----+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525066,"byte_end":6525105,"line_start":63,"line_end":63,"column_start":1,"column_end":40}},{"value":"! | \\x00\\x00\\x00\\x0b |  hello world |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525106,"byte_end":6525145,"line_start":64,"line_end":64,"column_start":1,"column_end":40}},{"value":"! +------------------+--------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525146,"byte_end":6525185,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525186,"byte_end":6525193,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525194,"byte_end":6525197,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! # Decoding","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525198,"byte_end":6525212,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525213,"byte_end":6525216,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! [`FramedRead`] adapts an [`AsyncRead`] into a `Stream` of [`BytesMut`],","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525217,"byte_end":6525292,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"! such that each yielded [`BytesMut`] value contains the contents of an","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525293,"byte_end":6525366,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"! entire frame. There are many configuration parameters enabling","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525367,"byte_end":6525433,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"! [`FramedRead`] to handle a wide range of protocols. Here are some","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525434,"byte_end":6525503,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"! examples that will cover the various options at a high level.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525504,"byte_end":6525569,"line_start":74,"line_end":74,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525570,"byte_end":6525573,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ## Example 1","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525574,"byte_end":6525590,"line_start":76,"line_end":76,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525591,"byte_end":6525594,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! The following will parse a `u16` length field at offset 0, including the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525595,"byte_end":6525671,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"! frame head in the yielded `BytesMut`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525672,"byte_end":6525713,"line_start":79,"line_end":79,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525714,"byte_end":6525717,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525718,"byte_end":6525725,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"! # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525726,"byte_end":6525757,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"! # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525758,"byte_end":6525808,"line_start":83,"line_end":83,"column_start":1,"column_end":51}},{"value":"! # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525809,"byte_end":6525850,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"! LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525851,"byte_end":6525886,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"!     .length_field_offset(0) // default value","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525887,"byte_end":6525935,"line_start":86,"line_end":86,"column_start":1,"column_end":49}},{"value":"!     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525936,"byte_end":6525967,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"!     .length_adjustment(0)   // default value","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6525968,"byte_end":6526016,"line_start":88,"line_end":88,"column_start":1,"column_end":49}},{"value":"!     .num_skip(0) // Do not strip frame header","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526017,"byte_end":6526066,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"!     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526067,"byte_end":6526089,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"! # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526090,"byte_end":6526097,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"! # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526098,"byte_end":6526120,"line_start":92,"line_end":92,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526121,"byte_end":6526128,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526129,"byte_end":6526132,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"! The following frame will be decoded as such:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526133,"byte_end":6526181,"line_start":95,"line_end":95,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526182,"byte_end":6526185,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526186,"byte_end":6526197,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"!          INPUT                           DECODED","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526198,"byte_end":6526250,"line_start":98,"line_end":98,"column_start":1,"column_end":53}},{"value":"! +-- len ---+--- Payload ---+     +-- len ---+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526251,"byte_end":6526316,"line_start":99,"line_end":99,"column_start":1,"column_end":66}},{"value":"! | \\x00\\x0B |  Hello world  | --> | \\x00\\x0B |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526317,"byte_end":6526382,"line_start":100,"line_end":100,"column_start":1,"column_end":66}},{"value":"! +----------+---------------+     +----------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526383,"byte_end":6526448,"line_start":101,"line_end":101,"column_start":1,"column_end":66}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526449,"byte_end":6526456,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526457,"byte_end":6526460,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"! The value of the length field is 11 (`\\x0B`) which represents the length","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526461,"byte_end":6526537,"line_start":104,"line_end":104,"column_start":1,"column_end":77}},{"value":"! of the payload, `hello world`. By default, [`FramedRead`] assumes that","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526538,"byte_end":6526612,"line_start":105,"line_end":105,"column_start":1,"column_end":75}},{"value":"! the length field represents the number of bytes that **follows** the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526613,"byte_end":6526685,"line_start":106,"line_end":106,"column_start":1,"column_end":73}},{"value":"! length field. Thus, the entire frame has a length of 13: 2 bytes for the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526686,"byte_end":6526762,"line_start":107,"line_end":107,"column_start":1,"column_end":77}},{"value":"! frame head + 11 bytes for the payload.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526763,"byte_end":6526805,"line_start":108,"line_end":108,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526806,"byte_end":6526809,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! ## Example 2","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526810,"byte_end":6526826,"line_start":110,"line_end":110,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526827,"byte_end":6526830,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"! The following will parse a `u16` length field at offset 0, omitting the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526831,"byte_end":6526906,"line_start":112,"line_end":112,"column_start":1,"column_end":76}},{"value":"! frame head in the yielded `BytesMut`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526907,"byte_end":6526948,"line_start":113,"line_end":113,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526949,"byte_end":6526952,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526953,"byte_end":6526960,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"! # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526961,"byte_end":6526992,"line_start":116,"line_end":116,"column_start":1,"column_end":32}},{"value":"! # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6526993,"byte_end":6527043,"line_start":117,"line_end":117,"column_start":1,"column_end":51}},{"value":"! # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527044,"byte_end":6527085,"line_start":118,"line_end":118,"column_start":1,"column_end":42}},{"value":"! LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527086,"byte_end":6527121,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"!     .length_field_offset(0) // default value","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527122,"byte_end":6527170,"line_start":120,"line_end":120,"column_start":1,"column_end":49}},{"value":"!     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527171,"byte_end":6527202,"line_start":121,"line_end":121,"column_start":1,"column_end":32}},{"value":"!     .length_adjustment(0)   // default value","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527203,"byte_end":6527251,"line_start":122,"line_end":122,"column_start":1,"column_end":49}},{"value":"!     // `num_skip` is not needed, the default is to skip","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527252,"byte_end":6527311,"line_start":123,"line_end":123,"column_start":1,"column_end":60}},{"value":"!     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527312,"byte_end":6527334,"line_start":124,"line_end":124,"column_start":1,"column_end":23}},{"value":"! # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527335,"byte_end":6527342,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"! # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527343,"byte_end":6527365,"line_start":126,"line_end":126,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527366,"byte_end":6527373,"line_start":127,"line_end":127,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527374,"byte_end":6527377,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"! The following frame will be decoded as such:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527378,"byte_end":6527426,"line_start":129,"line_end":129,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527427,"byte_end":6527430,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527431,"byte_end":6527442,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"!          INPUT                        DECODED","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527443,"byte_end":6527492,"line_start":132,"line_end":132,"column_start":1,"column_end":50}},{"value":"! +-- len ---+--- Payload ---+     +--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527493,"byte_end":6527547,"line_start":133,"line_end":133,"column_start":1,"column_end":55}},{"value":"! | \\x00\\x0B |  Hello world  | --> |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527548,"byte_end":6527602,"line_start":134,"line_end":134,"column_start":1,"column_end":55}},{"value":"! +----------+---------------+     +---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527603,"byte_end":6527657,"line_start":135,"line_end":135,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527658,"byte_end":6527665,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527666,"byte_end":6527669,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"! This is similar to the first example, the only difference is that the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527670,"byte_end":6527743,"line_start":138,"line_end":138,"column_start":1,"column_end":74}},{"value":"! frame head is **not** included in the yielded `BytesMut` value.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527744,"byte_end":6527811,"line_start":139,"line_end":139,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527812,"byte_end":6527815,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"! ## Example 3","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527816,"byte_end":6527832,"line_start":141,"line_end":141,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527833,"byte_end":6527836,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"! The following will parse a `u16` length field at offset 0, including the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527837,"byte_end":6527913,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"! frame head in the yielded `BytesMut`. In this case, the length field","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527914,"byte_end":6527986,"line_start":144,"line_end":144,"column_start":1,"column_end":73}},{"value":"! **includes** the frame head length.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6527987,"byte_end":6528026,"line_start":145,"line_end":145,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528027,"byte_end":6528030,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528031,"byte_end":6528038,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"! # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528039,"byte_end":6528070,"line_start":148,"line_end":148,"column_start":1,"column_end":32}},{"value":"! # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528071,"byte_end":6528121,"line_start":149,"line_end":149,"column_start":1,"column_end":51}},{"value":"! # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528122,"byte_end":6528163,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"! LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528164,"byte_end":6528199,"line_start":151,"line_end":151,"column_start":1,"column_end":36}},{"value":"!     .length_field_offset(0) // default value","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528200,"byte_end":6528248,"line_start":152,"line_end":152,"column_start":1,"column_end":49}},{"value":"!     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528249,"byte_end":6528280,"line_start":153,"line_end":153,"column_start":1,"column_end":32}},{"value":"!     .length_adjustment(-2)  // size of head","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528281,"byte_end":6528328,"line_start":154,"line_end":154,"column_start":1,"column_end":48}},{"value":"!     .num_skip(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528329,"byte_end":6528349,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"!     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528350,"byte_end":6528372,"line_start":156,"line_end":156,"column_start":1,"column_end":23}},{"value":"! # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528373,"byte_end":6528380,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"! # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528381,"byte_end":6528403,"line_start":158,"line_end":158,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528404,"byte_end":6528411,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528412,"byte_end":6528415,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"! The following frame will be decoded as such:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528416,"byte_end":6528464,"line_start":161,"line_end":161,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528465,"byte_end":6528468,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528469,"byte_end":6528480,"line_start":163,"line_end":163,"column_start":1,"column_end":12}},{"value":"!          INPUT                           DECODED","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528481,"byte_end":6528533,"line_start":164,"line_end":164,"column_start":1,"column_end":53}},{"value":"! +-- len ---+--- Payload ---+     +-- len ---+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528534,"byte_end":6528599,"line_start":165,"line_end":165,"column_start":1,"column_end":66}},{"value":"! | \\x00\\x0D |  Hello world  | --> | \\x00\\x0D |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528600,"byte_end":6528665,"line_start":166,"line_end":166,"column_start":1,"column_end":66}},{"value":"! +----------+---------------+     +----------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528666,"byte_end":6528731,"line_start":167,"line_end":167,"column_start":1,"column_end":66}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528732,"byte_end":6528739,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528740,"byte_end":6528743,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"! In most cases, the length field represents the length of the payload","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528744,"byte_end":6528816,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"! only, as shown in the previous examples. However, in some protocols the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528817,"byte_end":6528892,"line_start":171,"line_end":171,"column_start":1,"column_end":76}},{"value":"! length field represents the length of the whole frame, including the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528893,"byte_end":6528965,"line_start":172,"line_end":172,"column_start":1,"column_end":73}},{"value":"! head. In such cases, we specify a negative `length_adjustment` to adjust","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6528966,"byte_end":6529042,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"! the value provided in the frame head to represent the payload length.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529043,"byte_end":6529116,"line_start":174,"line_end":174,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529117,"byte_end":6529120,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"! ## Example 4","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529121,"byte_end":6529137,"line_start":176,"line_end":176,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529138,"byte_end":6529141,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"! The following will parse a 3 byte length field at offset 0 in a 5 byte","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529142,"byte_end":6529216,"line_start":178,"line_end":178,"column_start":1,"column_end":75}},{"value":"! frame head, including the frame head in the yielded `BytesMut`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529217,"byte_end":6529284,"line_start":179,"line_end":179,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529285,"byte_end":6529288,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529289,"byte_end":6529296,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"! # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529297,"byte_end":6529328,"line_start":182,"line_end":182,"column_start":1,"column_end":32}},{"value":"! # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529329,"byte_end":6529379,"line_start":183,"line_end":183,"column_start":1,"column_end":51}},{"value":"! # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529380,"byte_end":6529421,"line_start":184,"line_end":184,"column_start":1,"column_end":42}},{"value":"! LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529422,"byte_end":6529457,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"!     .length_field_offset(0) // default value","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529458,"byte_end":6529506,"line_start":186,"line_end":186,"column_start":1,"column_end":49}},{"value":"!     .length_field_length(3)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529507,"byte_end":6529538,"line_start":187,"line_end":187,"column_start":1,"column_end":32}},{"value":"!     .length_adjustment(2)  // remaining head","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529539,"byte_end":6529587,"line_start":188,"line_end":188,"column_start":1,"column_end":49}},{"value":"!     .num_skip(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529588,"byte_end":6529608,"line_start":189,"line_end":189,"column_start":1,"column_end":21}},{"value":"!     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529609,"byte_end":6529631,"line_start":190,"line_end":190,"column_start":1,"column_end":23}},{"value":"! # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529632,"byte_end":6529639,"line_start":191,"line_end":191,"column_start":1,"column_end":8}},{"value":"! # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529640,"byte_end":6529662,"line_start":192,"line_end":192,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529663,"byte_end":6529670,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529671,"byte_end":6529674,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"! The following frame will be decoded as such:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529675,"byte_end":6529723,"line_start":195,"line_end":195,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529724,"byte_end":6529727,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529728,"byte_end":6529739,"line_start":197,"line_end":197,"column_start":1,"column_end":12}},{"value":"!                  INPUT","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529740,"byte_end":6529766,"line_start":198,"line_end":198,"column_start":1,"column_end":27}},{"value":"! +---- len -----+- head -+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529767,"byte_end":6529812,"line_start":199,"line_end":199,"column_start":1,"column_end":46}},{"value":"! | \\x00\\x00\\x0B | \\xCAFE |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529813,"byte_end":6529858,"line_start":200,"line_end":200,"column_start":1,"column_end":46}},{"value":"! +--------------+--------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529859,"byte_end":6529904,"line_start":201,"line_end":201,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529905,"byte_end":6529908,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"!                  DECODED","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529909,"byte_end":6529937,"line_start":203,"line_end":203,"column_start":1,"column_end":29}},{"value":"! +---- len -----+- head -+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529938,"byte_end":6529983,"line_start":204,"line_end":204,"column_start":1,"column_end":46}},{"value":"! | \\x00\\x00\\x0B | \\xCAFE |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6529984,"byte_end":6530029,"line_start":205,"line_end":205,"column_start":1,"column_end":46}},{"value":"! +--------------+--------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530030,"byte_end":6530075,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530076,"byte_end":6530083,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530084,"byte_end":6530087,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"! A more advanced example that shows a case where there is extra frame","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530088,"byte_end":6530160,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"! head data between the length field and the payload. In such cases, it is","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530161,"byte_end":6530237,"line_start":210,"line_end":210,"column_start":1,"column_end":77}},{"value":"! usually desirable to include the frame head as part of the yielded","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530238,"byte_end":6530308,"line_start":211,"line_end":211,"column_start":1,"column_end":71}},{"value":"! `BytesMut`. This lets consumers of the length delimited framer to","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530309,"byte_end":6530378,"line_start":212,"line_end":212,"column_start":1,"column_end":70}},{"value":"! process the frame head as needed.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530379,"byte_end":6530416,"line_start":213,"line_end":213,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530417,"byte_end":6530420,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! The positive `length_adjustment` value lets `FramedRead` factor in the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530421,"byte_end":6530495,"line_start":215,"line_end":215,"column_start":1,"column_end":75}},{"value":"! additional head into the frame length calculation.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530496,"byte_end":6530550,"line_start":216,"line_end":216,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530551,"byte_end":6530554,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! ## Example 5","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530555,"byte_end":6530571,"line_start":218,"line_end":218,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530572,"byte_end":6530575,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"! The following will parse a `u16` length field at offset 1 of a 4 byte","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530576,"byte_end":6530649,"line_start":220,"line_end":220,"column_start":1,"column_end":74}},{"value":"! frame head. The first byte and the length field will be omitted from the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530650,"byte_end":6530726,"line_start":221,"line_end":221,"column_start":1,"column_end":77}},{"value":"! yielded `BytesMut`, but the trailing 2 bytes of the frame head will be","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530727,"byte_end":6530801,"line_start":222,"line_end":222,"column_start":1,"column_end":75}},{"value":"! included.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530802,"byte_end":6530815,"line_start":223,"line_end":223,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530816,"byte_end":6530819,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530820,"byte_end":6530827,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"! # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530828,"byte_end":6530859,"line_start":226,"line_end":226,"column_start":1,"column_end":32}},{"value":"! # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530860,"byte_end":6530910,"line_start":227,"line_end":227,"column_start":1,"column_end":51}},{"value":"! # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530911,"byte_end":6530952,"line_start":228,"line_end":228,"column_start":1,"column_end":42}},{"value":"! LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530953,"byte_end":6530988,"line_start":229,"line_end":229,"column_start":1,"column_end":36}},{"value":"!     .length_field_offset(1) // length of hdr1","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6530989,"byte_end":6531038,"line_start":230,"line_end":230,"column_start":1,"column_end":50}},{"value":"!     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531039,"byte_end":6531070,"line_start":231,"line_end":231,"column_start":1,"column_end":32}},{"value":"!     .length_adjustment(1)  // length of hdr2","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531071,"byte_end":6531119,"line_start":232,"line_end":232,"column_start":1,"column_end":49}},{"value":"!     .num_skip(3) // length of hdr1 + LEN","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531120,"byte_end":6531164,"line_start":233,"line_end":233,"column_start":1,"column_end":45}},{"value":"!     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531165,"byte_end":6531187,"line_start":234,"line_end":234,"column_start":1,"column_end":23}},{"value":"! # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531188,"byte_end":6531195,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"! # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531196,"byte_end":6531218,"line_start":236,"line_end":236,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531219,"byte_end":6531226,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531227,"byte_end":6531230,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"! The following frame will be decoded as such:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531231,"byte_end":6531279,"line_start":239,"line_end":239,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531280,"byte_end":6531283,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531284,"byte_end":6531295,"line_start":241,"line_end":241,"column_start":1,"column_end":12}},{"value":"!                  INPUT","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531296,"byte_end":6531322,"line_start":242,"line_end":242,"column_start":1,"column_end":27}},{"value":"! +- hdr1 -+-- len ---+- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531323,"byte_end":6531373,"line_start":243,"line_end":243,"column_start":1,"column_end":51}},{"value":"! |  \\xCA  | \\x00\\x0B |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531374,"byte_end":6531424,"line_start":244,"line_end":244,"column_start":1,"column_end":51}},{"value":"! +--------+----------+--------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531425,"byte_end":6531475,"line_start":245,"line_end":245,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531476,"byte_end":6531479,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"!          DECODED","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531480,"byte_end":6531500,"line_start":247,"line_end":247,"column_start":1,"column_end":21}},{"value":"! +- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531501,"byte_end":6531531,"line_start":248,"line_end":248,"column_start":1,"column_end":31}},{"value":"! |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531532,"byte_end":6531562,"line_start":249,"line_end":249,"column_start":1,"column_end":31}},{"value":"! +--------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531563,"byte_end":6531593,"line_start":250,"line_end":250,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531594,"byte_end":6531601,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531602,"byte_end":6531605,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"! The length field is situated in the middle of the frame head. In this","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531606,"byte_end":6531679,"line_start":253,"line_end":253,"column_start":1,"column_end":74}},{"value":"! case, the first byte in the frame head could be a version or some other","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531680,"byte_end":6531755,"line_start":254,"line_end":254,"column_start":1,"column_end":76}},{"value":"! identifier that is not needed for processing. On the other hand, the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531756,"byte_end":6531828,"line_start":255,"line_end":255,"column_start":1,"column_end":73}},{"value":"! second half of the head is needed.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531829,"byte_end":6531867,"line_start":256,"line_end":256,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531868,"byte_end":6531871,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"! `length_field_offset` indicates how many bytes to skip before starting","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531872,"byte_end":6531946,"line_start":258,"line_end":258,"column_start":1,"column_end":75}},{"value":"! to read the length field.  `length_adjustment` is the number of bytes to","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6531947,"byte_end":6532023,"line_start":259,"line_end":259,"column_start":1,"column_end":77}},{"value":"! skip starting at the end of the length field. In this case, it is the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532024,"byte_end":6532097,"line_start":260,"line_end":260,"column_start":1,"column_end":74}},{"value":"! second half of the head.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532098,"byte_end":6532126,"line_start":261,"line_end":261,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532127,"byte_end":6532130,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"! ## Example 6","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532131,"byte_end":6532147,"line_start":263,"line_end":263,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532148,"byte_end":6532151,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"! The following will parse a `u16` length field at offset 1 of a 4 byte","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532152,"byte_end":6532225,"line_start":265,"line_end":265,"column_start":1,"column_end":74}},{"value":"! frame head. The first byte and the length field will be omitted from the","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532226,"byte_end":6532302,"line_start":266,"line_end":266,"column_start":1,"column_end":77}},{"value":"! yielded `BytesMut`, but the trailing 2 bytes of the frame head will be","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532303,"byte_end":6532377,"line_start":267,"line_end":267,"column_start":1,"column_end":75}},{"value":"! included. In this case, the length field **includes** the frame head","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532378,"byte_end":6532450,"line_start":268,"line_end":268,"column_start":1,"column_end":73}},{"value":"! length.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532451,"byte_end":6532462,"line_start":269,"line_end":269,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532463,"byte_end":6532466,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532467,"byte_end":6532474,"line_start":271,"line_end":271,"column_start":1,"column_end":8}},{"value":"! # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532475,"byte_end":6532506,"line_start":272,"line_end":272,"column_start":1,"column_end":32}},{"value":"! # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532507,"byte_end":6532557,"line_start":273,"line_end":273,"column_start":1,"column_end":51}},{"value":"! # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532558,"byte_end":6532599,"line_start":274,"line_end":274,"column_start":1,"column_end":42}},{"value":"! LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532600,"byte_end":6532635,"line_start":275,"line_end":275,"column_start":1,"column_end":36}},{"value":"!     .length_field_offset(1) // length of hdr1","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532636,"byte_end":6532685,"line_start":276,"line_end":276,"column_start":1,"column_end":50}},{"value":"!     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532686,"byte_end":6532717,"line_start":277,"line_end":277,"column_start":1,"column_end":32}},{"value":"!     .length_adjustment(-3)  // length of hdr1 + LEN, negative","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532718,"byte_end":6532783,"line_start":278,"line_end":278,"column_start":1,"column_end":66}},{"value":"!     .num_skip(3)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532784,"byte_end":6532804,"line_start":279,"line_end":279,"column_start":1,"column_end":21}},{"value":"!     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532805,"byte_end":6532827,"line_start":280,"line_end":280,"column_start":1,"column_end":23}},{"value":"! # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532828,"byte_end":6532835,"line_start":281,"line_end":281,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532836,"byte_end":6532843,"line_start":282,"line_end":282,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532844,"byte_end":6532847,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"! The following frame will be decoded as such:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532848,"byte_end":6532896,"line_start":284,"line_end":284,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532897,"byte_end":6532900,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532901,"byte_end":6532912,"line_start":286,"line_end":286,"column_start":1,"column_end":12}},{"value":"!                  INPUT","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532913,"byte_end":6532939,"line_start":287,"line_end":287,"column_start":1,"column_end":27}},{"value":"! +- hdr1 -+-- len ---+- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532940,"byte_end":6532990,"line_start":288,"line_end":288,"column_start":1,"column_end":51}},{"value":"! |  \\xCA  | \\x00\\x0F |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6532991,"byte_end":6533041,"line_start":289,"line_end":289,"column_start":1,"column_end":51}},{"value":"! +--------+----------+--------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533042,"byte_end":6533092,"line_start":290,"line_end":290,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533093,"byte_end":6533096,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"!          DECODED","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533097,"byte_end":6533117,"line_start":292,"line_end":292,"column_start":1,"column_end":21}},{"value":"! +- hdr2 -+--- Payload ---+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533118,"byte_end":6533148,"line_start":293,"line_end":293,"column_start":1,"column_end":31}},{"value":"! |  \\xFE  |  Hello world  |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533149,"byte_end":6533179,"line_start":294,"line_end":294,"column_start":1,"column_end":31}},{"value":"! +--------+---------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533180,"byte_end":6533210,"line_start":295,"line_end":295,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533211,"byte_end":6533218,"line_start":296,"line_end":296,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533219,"byte_end":6533222,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"! Similar to the example above, the difference is that the length field","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533223,"byte_end":6533296,"line_start":298,"line_end":298,"column_start":1,"column_end":74}},{"value":"! represents the length of the entire frame instead of just the payload.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533297,"byte_end":6533371,"line_start":299,"line_end":299,"column_start":1,"column_end":75}},{"value":"! The length of `hdr1` and `len` must be counted in `length_adjustment`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533372,"byte_end":6533446,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"! Note that the length of `hdr2` does **not** need to be explicitly set","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533447,"byte_end":6533520,"line_start":301,"line_end":301,"column_start":1,"column_end":74}},{"value":"! anywhere because it already is factored into the total frame length that","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533521,"byte_end":6533597,"line_start":302,"line_end":302,"column_start":1,"column_end":77}},{"value":"! is read from the byte stream.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533598,"byte_end":6533631,"line_start":303,"line_end":303,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533632,"byte_end":6533635,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"! # Encoding","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533636,"byte_end":6533650,"line_start":305,"line_end":305,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533651,"byte_end":6533654,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"! [`FramedWrite`] adapts an [`AsyncWrite`] into a `Sink` of [`BytesMut`],","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533655,"byte_end":6533730,"line_start":307,"line_end":307,"column_start":1,"column_end":76}},{"value":"! such that each submitted [`BytesMut`] is prefaced by a length field.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533731,"byte_end":6533803,"line_start":308,"line_end":308,"column_start":1,"column_end":73}},{"value":"! There are fewer configuration options than [`FramedRead`]. Given","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533804,"byte_end":6533872,"line_start":309,"line_end":309,"column_start":1,"column_end":69}},{"value":"! protocols that have more complex frame heads, an encoder should probably","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533873,"byte_end":6533949,"line_start":310,"line_end":310,"column_start":1,"column_end":77}},{"value":"! be written by hand using [`Encoder`].","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533950,"byte_end":6533991,"line_start":311,"line_end":311,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533992,"byte_end":6533995,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"! Here is a simple example, given a `FramedWrite` with the following","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6533996,"byte_end":6534066,"line_start":313,"line_end":313,"column_start":1,"column_end":71}},{"value":"! configuration:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534067,"byte_end":6534085,"line_start":314,"line_end":314,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534086,"byte_end":6534089,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534090,"byte_end":6534097,"line_start":316,"line_end":316,"column_start":1,"column_end":8}},{"value":"! # use tokio::io::AsyncWrite;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534098,"byte_end":6534130,"line_start":317,"line_end":317,"column_start":1,"column_end":33}},{"value":"! # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534131,"byte_end":6534181,"line_start":318,"line_end":318,"column_start":1,"column_end":51}},{"value":"! # fn write_frame<T: AsyncWrite>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534182,"byte_end":6534226,"line_start":319,"line_end":319,"column_start":1,"column_end":45}},{"value":"! # let _ =","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534227,"byte_end":6534240,"line_start":320,"line_end":320,"column_start":1,"column_end":14}},{"value":"! LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534241,"byte_end":6534276,"line_start":321,"line_end":321,"column_start":1,"column_end":36}},{"value":"!     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534277,"byte_end":6534308,"line_start":322,"line_end":322,"column_start":1,"column_end":32}},{"value":"!     .new_write(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534309,"byte_end":6534332,"line_start":323,"line_end":323,"column_start":1,"column_end":24}},{"value":"! # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534333,"byte_end":6534340,"line_start":324,"line_end":324,"column_start":1,"column_end":8}},{"value":"! # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534341,"byte_end":6534363,"line_start":325,"line_end":325,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534364,"byte_end":6534371,"line_start":326,"line_end":326,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534372,"byte_end":6534375,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"! A payload of `hello world` will be encoded as:","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534376,"byte_end":6534426,"line_start":328,"line_end":328,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534427,"byte_end":6534430,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534431,"byte_end":6534442,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"! +- len: u16 -+---- data ----+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534443,"byte_end":6534476,"line_start":331,"line_end":331,"column_start":1,"column_end":34}},{"value":"! |  \\x00\\x0b  |  hello world |","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534477,"byte_end":6534510,"line_start":332,"line_end":332,"column_start":1,"column_end":34}},{"value":"! +------------+--------------+","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534511,"byte_end":6534544,"line_start":333,"line_end":333,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534545,"byte_end":6534552,"line_start":334,"line_end":334,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534553,"byte_end":6534556,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"! [`LengthDelimitedCodec::new()`]: struct.LengthDelimitedCodec.html#method.new","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534557,"byte_end":6534637,"line_start":336,"line_end":336,"column_start":1,"column_end":81}},{"value":"! [`FramedRead`]: struct.FramedRead.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534638,"byte_end":6534680,"line_start":337,"line_end":337,"column_start":1,"column_end":43}},{"value":"! [`FramedWrite`]: struct.FramedWrite.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534681,"byte_end":6534725,"line_start":338,"line_end":338,"column_start":1,"column_end":45}},{"value":"! [`AsyncRead`]: ../../trait.AsyncRead.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534726,"byte_end":6534771,"line_start":339,"line_end":339,"column_start":1,"column_end":46}},{"value":"! [`AsyncWrite`]: ../../trait.AsyncWrite.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534772,"byte_end":6534819,"line_start":340,"line_end":340,"column_start":1,"column_end":48}},{"value":"! [`Encoder`]: ../trait.Encoder.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534820,"byte_end":6534858,"line_start":341,"line_end":341,"column_start":1,"column_end":39}},{"value":"! [`BytesMut`]: https://docs.rs/bytes/0.4/bytes/struct.BytesMut.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6534859,"byte_end":6534929,"line_start":342,"line_end":342,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":493},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6535491,"byte_end":6535498,"line_start":359,"line_end":359,"column_start":12,"column_end":19},"name":"Builder","qualname":"::codec::length_delimited::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" Configure length delimited `LengthDelimitedCodec`s.","sig":null,"attributes":[{"value":"/ Configure length delimited `LengthDelimitedCodec`s.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6535173,"byte_end":6535228,"line_start":353,"line_end":353,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6535229,"byte_end":6535232,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ `Builder` enables constructing configured length delimited codecs. Note","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6535233,"byte_end":6535308,"line_start":355,"line_end":355,"column_start":1,"column_end":76}},{"value":"/ that not all configuration settings apply to both encoding and decoding. See","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6535309,"byte_end":6535389,"line_start":356,"line_end":356,"column_start":1,"column_end":81}},{"value":"/ the documentation for specific methods for more detail.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6535390,"byte_end":6535449,"line_start":357,"line_end":357,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":364},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536169,"byte_end":6536194,"line_start":381,"line_end":381,"column_start":12,"column_end":37},"name":"LengthDelimitedCodecError","qualname":"::codec::length_delimited::LengthDelimitedCodecError","value":"LengthDelimitedCodecError {  }","parent":null,"children":[{"krate":0,"index":365}],"decl_id":null,"docs":" An error when the number of bytes read is more than max frame length.\n","sig":null,"attributes":[{"value":"/ An error when the number of bytes read is more than max frame length.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536084,"byte_end":6536157,"line_start":380,"line_end":380,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536539,"byte_end":6536559,"line_start":394,"line_end":394,"column_start":12,"column_end":32},"name":"LengthDelimitedCodec","qualname":"::codec::length_delimited::LengthDelimitedCodec","value":"LengthDelimitedCodec {  }","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":" A codec for frames delimited by a frame head specifying their lengths.","sig":null,"attributes":[{"value":"/ A codec for frames delimited by a frame head specifying their lengths.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536215,"byte_end":6536289,"line_start":385,"line_end":385,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536290,"byte_end":6536293,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ This allows the consumer to work with entire frames without having to worry","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536294,"byte_end":6536373,"line_start":387,"line_end":387,"column_start":1,"column_end":80}},{"value":"/ about buffering or other framing logic.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536374,"byte_end":6536417,"line_start":388,"line_end":388,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536418,"byte_end":6536421,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ See [module level] documentation for more detail.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536422,"byte_end":6536475,"line_start":390,"line_end":390,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536476,"byte_end":6536479,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ [module level]: index.html","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536480,"byte_end":6536510,"line_start":392,"line_end":392,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536903,"byte_end":6536906,"line_start":412,"line_end":412,"column_start":12,"column_end":15},"name":"new","qualname":"<LengthDelimitedCodec>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `LengthDelimitedCodec` with the default configuration values.\n","sig":null,"attributes":[{"value":"/ Creates a new `LengthDelimitedCodec` with the default configuration values.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536812,"byte_end":6536891,"line_start":411,"line_end":411,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537133,"byte_end":6537140,"line_start":421,"line_end":421,"column_start":12,"column_end":19},"name":"builder","qualname":"<LengthDelimitedCodec>::builder","value":"pub fn builder() -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new length delimited codec builder with default configuration\n values.\n","sig":null,"attributes":[{"value":"/ Creates a new length delimited codec builder with default configuration","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537030,"byte_end":6537105,"line_start":419,"line_end":419,"column_start":5,"column_end":80}},{"value":"/ values.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537110,"byte_end":6537121,"line_start":420,"line_end":420,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537362,"byte_end":6537378,"line_start":429,"line_end":429,"column_start":12,"column_end":28},"name":"max_frame_length","qualname":"<LengthDelimitedCodec>::max_frame_length","value":"pub fn max_frame_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current max frame setting","sig":null,"attributes":[{"value":"/ Returns the current max frame setting","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537190,"byte_end":6537231,"line_start":425,"line_end":425,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537236,"byte_end":6537239,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This is the largest size this codec will accept from the wire. Larger","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537244,"byte_end":6537317,"line_start":427,"line_end":427,"column_start":5,"column_end":78}},{"value":"/ frames will be rejected.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537322,"byte_end":6537350,"line_start":428,"line_end":428,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537799,"byte_end":6537819,"line_start":439,"line_end":439,"column_start":12,"column_end":32},"name":"set_max_frame_length","qualname":"<LengthDelimitedCodec>::set_max_frame_length","value":"pub fn set_max_frame_length(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Updates the max frame setting.","sig":null,"attributes":[{"value":"/ Updates the max frame setting.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537443,"byte_end":6537477,"line_start":433,"line_end":433,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537482,"byte_end":6537485,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ The change takes effect the next time a frame is decoded. In other","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537490,"byte_end":6537560,"line_start":435,"line_end":435,"column_start":5,"column_end":75}},{"value":"/ words, if a frame is currently in process of being decoded with a frame","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537565,"byte_end":6537640,"line_start":436,"line_end":436,"column_start":5,"column_end":80}},{"value":"/ size greater than `val` but less than the max frame length in effect","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537645,"byte_end":6537717,"line_start":437,"line_end":437,"column_start":5,"column_end":77}},{"value":"/ before calling this function, then the frame will be allowed.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6537722,"byte_end":6537787,"line_start":438,"line_end":438,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543129,"byte_end":6543132,"line_start":622,"line_end":622,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"pub fn new() -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Creates a new length delimited codec builder with default configuration\n values.","sig":null,"attributes":[{"value":"/ Creates a new length delimited codec builder with default configuration","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542587,"byte_end":6542662,"line_start":603,"line_end":603,"column_start":5,"column_end":80}},{"value":"/ values.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542667,"byte_end":6542678,"line_start":604,"line_end":604,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542683,"byte_end":6542686,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542691,"byte_end":6542705,"line_start":606,"line_end":606,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542710,"byte_end":6542713,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542718,"byte_end":6542725,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542730,"byte_end":6542761,"line_start":609,"line_end":609,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542766,"byte_end":6542814,"line_start":610,"line_end":610,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542819,"byte_end":6542822,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542827,"byte_end":6542868,"line_start":612,"line_end":612,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542873,"byte_end":6542908,"line_start":613,"line_end":613,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542913,"byte_end":6542944,"line_start":614,"line_end":614,"column_start":5,"column_end":36}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542949,"byte_end":6542980,"line_start":615,"line_end":615,"column_start":5,"column_end":36}},{"value":"/     .length_adjustment(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542985,"byte_end":6543014,"line_start":616,"line_end":616,"column_start":5,"column_end":34}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543019,"byte_end":6543039,"line_start":617,"line_end":617,"column_start":5,"column_end":25}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543044,"byte_end":6543066,"line_start":618,"line_end":618,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543071,"byte_end":6543078,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543083,"byte_end":6543105,"line_start":620,"line_end":620,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543110,"byte_end":6543117,"line_start":621,"line_end":621,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544317,"byte_end":6544327,"line_start":663,"line_end":663,"column_start":12,"column_end":22},"name":"big_endian","qualname":"<Builder>::big_endian","value":"pub fn big_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Read the length field as a big endian integer","sig":null,"attributes":[{"value":"/ Read the length field as a big endian integer","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543796,"byte_end":6543845,"line_start":644,"line_end":644,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543850,"byte_end":6543853,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ This is the default setting.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543858,"byte_end":6543890,"line_start":646,"line_end":646,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543895,"byte_end":6543898,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543903,"byte_end":6543971,"line_start":648,"line_end":648,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543976,"byte_end":6543979,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6543984,"byte_end":6543998,"line_start":650,"line_end":650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544003,"byte_end":6544006,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544011,"byte_end":6544018,"line_start":652,"line_end":652,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544023,"byte_end":6544054,"line_start":653,"line_end":653,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544059,"byte_end":6544107,"line_start":654,"line_end":654,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544112,"byte_end":6544115,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544120,"byte_end":6544161,"line_start":656,"line_end":656,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544166,"byte_end":6544201,"line_start":657,"line_end":657,"column_start":5,"column_end":40}},{"value":"/     .big_endian()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544206,"byte_end":6544227,"line_start":658,"line_end":658,"column_start":5,"column_end":26}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544232,"byte_end":6544254,"line_start":659,"line_end":659,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544259,"byte_end":6544266,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544271,"byte_end":6544293,"line_start":661,"line_end":661,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544298,"byte_end":6544305,"line_start":662,"line_end":662,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544959,"byte_end":6544972,"line_start":687,"line_end":687,"column_start":12,"column_end":25},"name":"little_endian","qualname":"<Builder>::little_endian","value":"pub fn little_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Read the length field as a little endian integer","sig":null,"attributes":[{"value":"/ Read the length field as a little endian integer","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544426,"byte_end":6544478,"line_start":668,"line_end":668,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544483,"byte_end":6544486,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ The default setting is big endian.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544491,"byte_end":6544529,"line_start":670,"line_end":670,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544534,"byte_end":6544537,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544542,"byte_end":6544610,"line_start":672,"line_end":672,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544615,"byte_end":6544618,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544623,"byte_end":6544637,"line_start":674,"line_end":674,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544642,"byte_end":6544645,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544650,"byte_end":6544657,"line_start":676,"line_end":676,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544662,"byte_end":6544693,"line_start":677,"line_end":677,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544698,"byte_end":6544746,"line_start":678,"line_end":678,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544751,"byte_end":6544754,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544759,"byte_end":6544800,"line_start":680,"line_end":680,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544805,"byte_end":6544840,"line_start":681,"line_end":681,"column_start":5,"column_end":40}},{"value":"/     .little_endian()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544845,"byte_end":6544869,"line_start":682,"line_end":682,"column_start":5,"column_end":29}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544874,"byte_end":6544896,"line_start":683,"line_end":683,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544901,"byte_end":6544908,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544913,"byte_end":6544935,"line_start":685,"line_end":685,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6544940,"byte_end":6544947,"line_start":686,"line_end":686,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545605,"byte_end":6545618,"line_start":711,"line_end":711,"column_start":12,"column_end":25},"name":"native_endian","qualname":"<Builder>::native_endian","value":"pub fn native_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Read the length field as a native endian integer","sig":null,"attributes":[{"value":"/ Read the length field as a native endian integer","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545072,"byte_end":6545124,"line_start":692,"line_end":692,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545129,"byte_end":6545132,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ The default setting is big endian.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545137,"byte_end":6545175,"line_start":694,"line_end":694,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545180,"byte_end":6545183,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545188,"byte_end":6545256,"line_start":696,"line_end":696,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545261,"byte_end":6545264,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545269,"byte_end":6545283,"line_start":698,"line_end":698,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545288,"byte_end":6545291,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545296,"byte_end":6545303,"line_start":700,"line_end":700,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545308,"byte_end":6545339,"line_start":701,"line_end":701,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545344,"byte_end":6545392,"line_start":702,"line_end":702,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545397,"byte_end":6545400,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545405,"byte_end":6545446,"line_start":704,"line_end":704,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545451,"byte_end":6545486,"line_start":705,"line_end":705,"column_start":5,"column_end":40}},{"value":"/     .native_endian()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545491,"byte_end":6545515,"line_start":706,"line_end":706,"column_start":5,"column_end":29}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545520,"byte_end":6545542,"line_start":707,"line_end":707,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545547,"byte_end":6545554,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545559,"byte_end":6545581,"line_start":709,"line_end":709,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545586,"byte_end":6545593,"line_start":710,"line_end":710,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546699,"byte_end":6546715,"line_start":745,"line_end":745,"column_start":12,"column_end":28},"name":"max_frame_length","qualname":"<Builder>::max_frame_length","value":"pub fn max_frame_length(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the max frame length","sig":null,"attributes":[{"value":"/ Sets the max frame length","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545787,"byte_end":6545816,"line_start":719,"line_end":719,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545821,"byte_end":6545824,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding. The","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545829,"byte_end":6545901,"line_start":721,"line_end":721,"column_start":5,"column_end":77}},{"value":"/ default value is 8MB.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545906,"byte_end":6545931,"line_start":722,"line_end":722,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545936,"byte_end":6545939,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ When decoding, the length field read from the byte stream is checked","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6545944,"byte_end":6546016,"line_start":724,"line_end":724,"column_start":5,"column_end":77}},{"value":"/ against this setting **before** any adjustments are applied. When","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546021,"byte_end":6546090,"line_start":725,"line_end":725,"column_start":5,"column_end":74}},{"value":"/ encoding, the length of the submitted payload is checked against this","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546095,"byte_end":6546168,"line_start":726,"line_end":726,"column_start":5,"column_end":78}},{"value":"/ setting.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546173,"byte_end":6546185,"line_start":727,"line_end":727,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546190,"byte_end":6546193,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ When frames exceed the max length, an `io::Error` with the custom value","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546198,"byte_end":6546273,"line_start":729,"line_end":729,"column_start":5,"column_end":80}},{"value":"/ of the `LengthDelimitedCodecError` type will be returned.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546278,"byte_end":6546339,"line_start":730,"line_end":730,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546344,"byte_end":6546347,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546352,"byte_end":6546366,"line_start":732,"line_end":732,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546371,"byte_end":6546374,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546379,"byte_end":6546386,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546391,"byte_end":6546422,"line_start":735,"line_end":735,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546427,"byte_end":6546475,"line_start":736,"line_end":736,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546480,"byte_end":6546483,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546488,"byte_end":6546529,"line_start":738,"line_end":738,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546534,"byte_end":6546569,"line_start":739,"line_end":739,"column_start":5,"column_end":40}},{"value":"/     .max_frame_length(8 * 1024)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546574,"byte_end":6546609,"line_start":740,"line_end":740,"column_start":5,"column_end":40}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546614,"byte_end":6546636,"line_start":741,"line_end":741,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546641,"byte_end":6546648,"line_start":742,"line_end":742,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546653,"byte_end":6546675,"line_start":743,"line_end":743,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546680,"byte_end":6546687,"line_start":744,"line_end":744,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547376,"byte_end":6547395,"line_start":769,"line_end":769,"column_start":12,"column_end":31},"name":"length_field_length","qualname":"<Builder>::length_field_length","value":"pub fn length_field_length(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bytes used to represent the length field","sig":null,"attributes":[{"value":"/ Sets the number of bytes used to represent the length field","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546812,"byte_end":6546875,"line_start":750,"line_end":750,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546880,"byte_end":6546883,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ The default value is `4`. The max value is `8`.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546888,"byte_end":6546939,"line_start":752,"line_end":752,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546944,"byte_end":6546947,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ This configuration option applies to both encoding and decoding.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6546952,"byte_end":6547020,"line_start":754,"line_end":754,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547025,"byte_end":6547028,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547033,"byte_end":6547047,"line_start":756,"line_end":756,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547052,"byte_end":6547055,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547060,"byte_end":6547067,"line_start":758,"line_end":758,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547072,"byte_end":6547103,"line_start":759,"line_end":759,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547108,"byte_end":6547156,"line_start":760,"line_end":760,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547161,"byte_end":6547164,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547169,"byte_end":6547210,"line_start":762,"line_end":762,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547215,"byte_end":6547250,"line_start":763,"line_end":763,"column_start":5,"column_end":40}},{"value":"/     .length_field_length(4)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547255,"byte_end":6547286,"line_start":764,"line_end":764,"column_start":5,"column_end":36}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547291,"byte_end":6547313,"line_start":765,"line_end":765,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547318,"byte_end":6547325,"line_start":766,"line_end":766,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547330,"byte_end":6547352,"line_start":767,"line_end":767,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547357,"byte_end":6547364,"line_start":768,"line_end":768,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548054,"byte_end":6548073,"line_start":792,"line_end":792,"column_start":12,"column_end":31},"name":"length_field_offset","qualname":"<Builder>::length_field_offset","value":"pub fn length_field_offset(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bytes in the header before the length field","sig":null,"attributes":[{"value":"/ Sets the number of bytes in the header before the length field","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547564,"byte_end":6547630,"line_start":775,"line_end":775,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547635,"byte_end":6547638,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ This configuration option only applies to decoding.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547643,"byte_end":6547698,"line_start":777,"line_end":777,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547703,"byte_end":6547706,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547711,"byte_end":6547725,"line_start":779,"line_end":779,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547730,"byte_end":6547733,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547738,"byte_end":6547745,"line_start":781,"line_end":781,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547750,"byte_end":6547781,"line_start":782,"line_end":782,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547786,"byte_end":6547834,"line_start":783,"line_end":783,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547839,"byte_end":6547842,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547847,"byte_end":6547888,"line_start":785,"line_end":785,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547893,"byte_end":6547928,"line_start":786,"line_end":786,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(1)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547933,"byte_end":6547964,"line_start":787,"line_end":787,"column_start":5,"column_end":36}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547969,"byte_end":6547991,"line_start":788,"line_end":788,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6547996,"byte_end":6548003,"line_start":789,"line_end":789,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548008,"byte_end":6548030,"line_start":790,"line_end":790,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548035,"byte_end":6548042,"line_start":791,"line_end":791,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548627,"byte_end":6548644,"line_start":813,"line_end":813,"column_start":12,"column_end":29},"name":"length_adjustment","qualname":"<Builder>::length_adjustment","value":"pub fn length_adjustment(&mut Self, isize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Delta between the payload length specified in the header and the real\n payload length","sig":null,"attributes":[{"value":"/ Delta between the payload length specified in the header and the real","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548176,"byte_end":6548249,"line_start":797,"line_end":797,"column_start":5,"column_end":78}},{"value":"/ payload length","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548254,"byte_end":6548272,"line_start":798,"line_end":798,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548277,"byte_end":6548280,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548285,"byte_end":6548299,"line_start":800,"line_end":800,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548304,"byte_end":6548307,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548312,"byte_end":6548319,"line_start":802,"line_end":802,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548324,"byte_end":6548355,"line_start":803,"line_end":803,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548360,"byte_end":6548408,"line_start":804,"line_end":804,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548413,"byte_end":6548416,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548421,"byte_end":6548462,"line_start":806,"line_end":806,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548467,"byte_end":6548502,"line_start":807,"line_end":807,"column_start":5,"column_end":40}},{"value":"/     .length_adjustment(-2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548507,"byte_end":6548537,"line_start":808,"line_end":808,"column_start":5,"column_end":35}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548542,"byte_end":6548564,"line_start":809,"line_end":809,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548569,"byte_end":6548576,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548581,"byte_end":6548603,"line_start":811,"line_end":811,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548608,"byte_end":6548615,"line_start":812,"line_end":812,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549294,"byte_end":6549302,"line_start":837,"line_end":837,"column_start":12,"column_end":20},"name":"num_skip","qualname":"<Builder>::num_skip","value":"pub fn num_skip(&mut Self, usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bytes to skip before reading the payload","sig":null,"attributes":[{"value":"/ Sets the number of bytes to skip before reading the payload","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548745,"byte_end":6548808,"line_start":818,"line_end":818,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548813,"byte_end":6548816,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Default value is `length_field_len + length_field_offset`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548821,"byte_end":6548882,"line_start":820,"line_end":820,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548887,"byte_end":6548890,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ This configuration option only applies to decoding","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548895,"byte_end":6548949,"line_start":822,"line_end":822,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548954,"byte_end":6548957,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548962,"byte_end":6548976,"line_start":824,"line_end":824,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548981,"byte_end":6548984,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6548989,"byte_end":6548996,"line_start":826,"line_end":826,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549001,"byte_end":6549032,"line_start":827,"line_end":827,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549037,"byte_end":6549085,"line_start":828,"line_end":828,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549090,"byte_end":6549093,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549098,"byte_end":6549139,"line_start":830,"line_end":830,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549144,"byte_end":6549179,"line_start":831,"line_end":831,"column_start":5,"column_end":40}},{"value":"/     .num_skip(4)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549184,"byte_end":6549204,"line_start":832,"line_end":832,"column_start":5,"column_end":25}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549209,"byte_end":6549231,"line_start":833,"line_end":833,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549236,"byte_end":6549243,"line_start":834,"line_end":834,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549248,"byte_end":6549270,"line_start":835,"line_end":835,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549275,"byte_end":6549282,"line_start":836,"line_end":836,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549822,"byte_end":6549831,"line_start":857,"line_end":857,"column_start":12,"column_end":21},"name":"new_codec","qualname":"<Builder>::new_codec","value":"pub fn new_codec(&Self) -> LengthDelimitedCodec","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `LengthDelimitedCodec`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `LengthDelimitedCodec`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549400,"byte_end":6549463,"line_start":842,"line_end":842,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549468,"byte_end":6549471,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549476,"byte_end":6549490,"line_start":844,"line_end":844,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549495,"byte_end":6549498,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549503,"byte_end":6549510,"line_start":846,"line_end":846,"column_start":5,"column_end":12}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549515,"byte_end":6549563,"line_start":847,"line_end":847,"column_start":5,"column_end":53}},{"value":"/ # pub fn main() {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549568,"byte_end":6549589,"line_start":848,"line_end":848,"column_start":5,"column_end":26}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549594,"byte_end":6549629,"line_start":849,"line_end":849,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549634,"byte_end":6549665,"line_start":850,"line_end":850,"column_start":5,"column_end":36}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549670,"byte_end":6549701,"line_start":851,"line_end":851,"column_start":5,"column_end":36}},{"value":"/     .length_adjustment(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549706,"byte_end":6549735,"line_start":852,"line_end":852,"column_start":5,"column_end":34}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549740,"byte_end":6549760,"line_start":853,"line_end":853,"column_start":5,"column_end":25}},{"value":"/     .new_codec();","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549765,"byte_end":6549786,"line_start":854,"line_end":854,"column_start":5,"column_end":26}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549791,"byte_end":6549798,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549803,"byte_end":6549810,"line_start":856,"line_end":856,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550487,"byte_end":6550495,"line_start":882,"line_end":882,"column_start":12,"column_end":20},"name":"new_read","qualname":"<Builder>::new_read","value":"pub fn new_read<T>(&Self, T) -> FramedRead<T, LengthDelimitedCodec> where\nT: AsyncRead","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `FramedRead`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `FramedRead`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6549983,"byte_end":6550036,"line_start":864,"line_end":864,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550041,"byte_end":6550044,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550049,"byte_end":6550063,"line_start":866,"line_end":866,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550068,"byte_end":6550071,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550076,"byte_end":6550083,"line_start":868,"line_end":868,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncRead;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550088,"byte_end":6550119,"line_start":869,"line_end":869,"column_start":5,"column_end":36}},{"value":"/ use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550124,"byte_end":6550172,"line_start":870,"line_end":870,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550177,"byte_end":6550180,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ # fn bind_read<T: AsyncRead>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550185,"byte_end":6550226,"line_start":872,"line_end":872,"column_start":5,"column_end":46}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550231,"byte_end":6550266,"line_start":873,"line_end":873,"column_start":5,"column_end":40}},{"value":"/     .length_field_offset(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550271,"byte_end":6550302,"line_start":874,"line_end":874,"column_start":5,"column_end":36}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550307,"byte_end":6550338,"line_start":875,"line_end":875,"column_start":5,"column_end":36}},{"value":"/     .length_adjustment(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550343,"byte_end":6550372,"line_start":876,"line_end":876,"column_start":5,"column_end":34}},{"value":"/     .num_skip(0)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550377,"byte_end":6550397,"line_start":877,"line_end":877,"column_start":5,"column_end":25}},{"value":"/     .new_read(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550402,"byte_end":6550424,"line_start":878,"line_end":878,"column_start":5,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550429,"byte_end":6550436,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550441,"byte_end":6550463,"line_start":880,"line_end":880,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550468,"byte_end":6550475,"line_start":881,"line_end":881,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551068,"byte_end":6551077,"line_start":903,"line_end":903,"column_start":12,"column_end":21},"name":"new_write","qualname":"<Builder>::new_write","value":"pub fn new_write<T>(&Self, T) -> FramedWrite<T, LengthDelimitedCodec> where\nT: AsyncWrite","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `FramedWrite`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `FramedWrite`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550659,"byte_end":6550713,"line_start":889,"line_end":889,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550718,"byte_end":6550721,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550726,"byte_end":6550740,"line_start":891,"line_end":891,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550745,"byte_end":6550748,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550753,"byte_end":6550760,"line_start":893,"line_end":893,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::AsyncWrite;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550765,"byte_end":6550797,"line_start":894,"line_end":894,"column_start":5,"column_end":37}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550802,"byte_end":6550852,"line_start":895,"line_end":895,"column_start":5,"column_end":55}},{"value":"/ # fn write_frame<T: AsyncWrite>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550857,"byte_end":6550901,"line_start":896,"line_end":896,"column_start":5,"column_end":49}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550906,"byte_end":6550941,"line_start":897,"line_end":897,"column_start":5,"column_end":40}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550946,"byte_end":6550977,"line_start":898,"line_end":898,"column_start":5,"column_end":36}},{"value":"/     .new_write(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6550982,"byte_end":6551005,"line_start":899,"line_end":899,"column_start":5,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551010,"byte_end":6551017,"line_start":900,"line_end":900,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551022,"byte_end":6551044,"line_start":901,"line_end":901,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551049,"byte_end":6551056,"line_start":902,"line_end":902,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551686,"byte_end":6551696,"line_start":925,"line_end":925,"column_start":12,"column_end":22},"name":"new_framed","qualname":"<Builder>::new_framed","value":"pub fn new_framed<T>(&Self, T) -> Framed<T, LengthDelimitedCodec> where\nT: AsyncRead + AsyncWrite","parent":null,"children":[],"decl_id":null,"docs":" Create a configured length delimited `Framed`","sig":null,"attributes":[{"value":"/ Create a configured length delimited `Framed`","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551238,"byte_end":6551287,"line_start":910,"line_end":910,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551292,"byte_end":6551295,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551300,"byte_end":6551314,"line_start":912,"line_end":912,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551319,"byte_end":6551322,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551327,"byte_end":6551334,"line_start":914,"line_end":914,"column_start":5,"column_end":12}},{"value":"/ # use tokio::io::{AsyncRead, AsyncWrite};","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551339,"byte_end":6551384,"line_start":915,"line_end":915,"column_start":5,"column_end":50}},{"value":"/ # use tokio_util::codec::LengthDelimitedCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551389,"byte_end":6551439,"line_start":916,"line_end":916,"column_start":5,"column_end":55}},{"value":"/ # fn write_frame<T: AsyncRead + AsyncWrite>(io: T) {","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551444,"byte_end":6551500,"line_start":917,"line_end":917,"column_start":5,"column_end":61}},{"value":"/ # let _ =","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551505,"byte_end":6551518,"line_start":918,"line_end":918,"column_start":5,"column_end":18}},{"value":"/ LengthDelimitedCodec::builder()","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551523,"byte_end":6551558,"line_start":919,"line_end":919,"column_start":5,"column_end":40}},{"value":"/     .length_field_length(2)","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551563,"byte_end":6551594,"line_start":920,"line_end":920,"column_start":5,"column_end":36}},{"value":"/     .new_framed(io);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551599,"byte_end":6551623,"line_start":921,"line_end":921,"column_start":5,"column_end":29}},{"value":"/ # }","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551628,"byte_end":6551635,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"/ # pub fn main() {}","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551640,"byte_end":6551662,"line_start":923,"line_end":923,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6551667,"byte_end":6551674,"line_start":924,"line_end":924,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6552973,"byte_end":6552983,"line_start":9,"line_end":9,"column_start":12,"column_end":22},"name":"LinesCodec","qualname":"::codec::lines_codec::LinesCodec","value":"LinesCodec {  }","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"decl_id":null,"docs":" A simple `Codec` implementation that splits up data into lines.\n","sig":null,"attributes":[{"value":"/ A simple `Codec` implementation that splits up data into lines.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6552832,"byte_end":6552899,"line_start":7,"line_end":7,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554063,"byte_end":6554066,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<LinesCodec>::new","value":"pub fn new() -> LinesCodec","parent":null,"children":[],"decl_id":null,"docs":" Returns a `LinesCodec` for splitting up data into lines.","sig":null,"attributes":[{"value":"/ Returns a `LinesCodec` for splitting up data into lines.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553664,"byte_end":6553724,"line_start":28,"line_end":28,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553729,"byte_end":6553732,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553737,"byte_end":6553747,"line_start":30,"line_end":30,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553752,"byte_end":6553755,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ The returned `LinesCodec` will not have an upper bound on the length","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553760,"byte_end":6553832,"line_start":32,"line_end":32,"column_start":5,"column_end":77}},{"value":"/ of a buffered line. See the documentation for [`new_with_max_length`]","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553837,"byte_end":6553910,"line_start":33,"line_end":33,"column_start":5,"column_end":78}},{"value":"/ for information on why this could be a potential security risk.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553915,"byte_end":6553982,"line_start":34,"line_end":34,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553987,"byte_end":6553990,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ [`new_with_max_length`]: #method.new_with_max_length","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553995,"byte_end":6554051,"line_start":36,"line_end":36,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555181,"byte_end":6555200,"line_start":63,"line_end":63,"column_start":12,"column_end":31},"name":"new_with_max_length","qualname":"<LinesCodec>::new_with_max_length","value":"pub fn new_with_max_length(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `LinesCodec` with a maximum line length limit.","sig":null,"attributes":[{"value":"/ Returns a `LinesCodec` with a maximum line length limit.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554224,"byte_end":6554284,"line_start":45,"line_end":45,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554289,"byte_end":6554292,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ If this is set, calls to `LinesCodec::decode` will return a","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554297,"byte_end":6554360,"line_start":47,"line_end":47,"column_start":5,"column_end":68}},{"value":"/ [`LengthError`] when a line exceeds the length limit. Subsequent calls","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554365,"byte_end":6554439,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ will discard up to `limit` bytes from that line until a newline","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554444,"byte_end":6554511,"line_start":49,"line_end":49,"column_start":5,"column_end":72}},{"value":"/ character is reached, returning `None` until the line over the limit","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554516,"byte_end":6554588,"line_start":50,"line_end":50,"column_start":5,"column_end":77}},{"value":"/ has been fully discarded. After that point, calls to `decode` will","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554593,"byte_end":6554663,"line_start":51,"line_end":51,"column_start":5,"column_end":75}},{"value":"/ function as normal.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554668,"byte_end":6554691,"line_start":52,"line_end":52,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554696,"byte_end":6554699,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554704,"byte_end":6554714,"line_start":54,"line_end":54,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554719,"byte_end":6554722,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Setting a length limit is highly recommended for any `LinesCodec` which","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554727,"byte_end":6554802,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ will be exposed to untrusted input. Otherwise, the size of the buffer","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554807,"byte_end":6554880,"line_start":57,"line_end":57,"column_start":5,"column_end":78}},{"value":"/ that holds the line currently being read is unbounded. An attacker could","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554885,"byte_end":6554961,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ exploit this unbounded buffer by sending an unbounded amount of input","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6554966,"byte_end":6555039,"line_start":59,"line_end":59,"column_start":5,"column_end":78}},{"value":"/ without any `\\n` characters, causing unbounded memory consumption.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555044,"byte_end":6555114,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555119,"byte_end":6555122,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ [`LengthError`]: ../struct.LengthError","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555127,"byte_end":6555169,"line_start":62,"line_end":62,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555766,"byte_end":6555776,"line_start":85,"line_end":85,"column_start":12,"column_end":22},"name":"max_length","qualname":"<LinesCodec>::max_length","value":"pub fn max_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum line length when decoding.","sig":null,"attributes":[{"value":"/ Returns the maximum line length when decoding.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555328,"byte_end":6555378,"line_start":70,"line_end":70,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555383,"byte_end":6555386,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555391,"byte_end":6555398,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use std::usize;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555403,"byte_end":6555422,"line_start":73,"line_end":73,"column_start":5,"column_end":24}},{"value":"/ use tokio_util::codec::LinesCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555427,"byte_end":6555465,"line_start":74,"line_end":74,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555470,"byte_end":6555473,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ let codec = LinesCodec::new();","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555478,"byte_end":6555512,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(codec.max_length(), usize::MAX);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555517,"byte_end":6555564,"line_start":77,"line_end":77,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555569,"byte_end":6555576,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555581,"byte_end":6555588,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use tokio_util::codec::LinesCodec;","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555593,"byte_end":6555631,"line_start":80,"line_end":80,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555636,"byte_end":6555639,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ let codec = LinesCodec::new_with_max_length(256);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555644,"byte_end":6555697,"line_start":82,"line_end":82,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(codec.max_length(), 256);","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555702,"byte_end":6555742,"line_start":83,"line_end":83,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6555747,"byte_end":6555754,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":556},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560100,"byte_end":6560121,"line_start":204,"line_end":204,"column_start":5,"column_end":26},"name":"MaxLineLengthExceeded","qualname":"::codec::lines_codec::LinesCodecError::MaxLineLengthExceeded","value":"LinesCodecError::MaxLineLengthExceeded","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" The maximum line length was exceeded.\n","sig":null,"attributes":[{"value":"/ The maximum line length was exceeded.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560054,"byte_end":6560095,"line_start":203,"line_end":203,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":558},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560156,"byte_end":6560158,"line_start":206,"line_end":206,"column_start":5,"column_end":7},"name":"Io","qualname":"::codec::lines_codec::LinesCodecError::Io","value":"LinesCodecError::Io(io::Error)","parent":{"krate":0,"index":555},"children":[],"decl_id":null,"docs":" An IO error occured.\n","sig":null,"attributes":[{"value":"/ An IO error occured.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560127,"byte_end":6560151,"line_start":205,"line_end":205,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":555},"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560032,"byte_end":6560047,"line_start":202,"line_end":202,"column_start":10,"column_end":25},"name":"LinesCodecError","qualname":"::codec::lines_codec::LinesCodecError","value":"pub enum LinesCodecError {\n\n    /// The maximum line length was exceeded.\n    MaxLineLengthExceeded,\n\n    /// An IO error occured.\n    Io(io::Error),\n}","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":558}],"decl_id":null,"docs":" An error occured while encoding or decoding a line.\n","sig":null,"attributes":[{"value":"/ An error occured while encoding or decoding a line.","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6559950,"byte_end":6560005,"line_start":200,"line_end":200,"column_start":1,"column_end":56}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486085,"byte_end":6486095,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486246,"byte_end":6486256,"line_start":18,"line_end":18,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486576,"byte_end":6486586,"line_start":32,"line_end":32,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6495754,"byte_end":6495758,"line_start":46,"line_end":46,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496029,"byte_end":6496035,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497336,"byte_end":6497342,"line_start":88,"line_end":88,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501558,"byte_end":6501564,"line_start":196,"line_end":196,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501826,"byte_end":6501832,"line_start":208,"line_end":208,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6502610,"byte_end":6502616,"line_start":233,"line_end":233,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6502976,"byte_end":6502980,"line_start":248,"line_end":248,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6503118,"byte_end":6503122,"line_start":254,"line_end":254,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6503329,"byte_end":6503333,"line_start":264,"line_end":264,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6503728,"byte_end":6503732,"line_start":278,"line_end":278,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6504013,"byte_end":6504017,"line_start":288,"line_end":288,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6504234,"byte_end":6504238,"line_start":298,"line_end":298,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6504767,"byte_end":6504771,"line_start":316,"line_end":316,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505143,"byte_end":6505147,"line_start":329,"line_end":329,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6506041,"byte_end":6506052,"line_start":360,"line_end":360,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507056,"byte_end":6507066,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507400,"byte_end":6507410,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508902,"byte_end":6508912,"line_start":99,"line_end":99,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6509225,"byte_end":6509235,"line_start":112,"line_end":112,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6510325,"byte_end":6510335,"line_start":159,"line_end":159,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6511391,"byte_end":6511402,"line_start":199,"line_end":199,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6511920,"byte_end":6511931,"line_start":225,"line_end":225,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6514981,"byte_end":6514992,"line_start":37,"line_end":37,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515331,"byte_end":6515342,"line_start":53,"line_end":53,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516770,"byte_end":6516781,"line_start":95,"line_end":95,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6517499,"byte_end":6517510,"line_start":120,"line_end":120,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6517842,"byte_end":6517853,"line_start":137,"line_end":137,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6518696,"byte_end":6518708,"line_start":168,"line_end":168,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6519050,"byte_end":6519062,"line_start":186,"line_end":186,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6521420,"byte_end":6521432,"line_start":258,"line_end":258,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6521768,"byte_end":6521780,"line_start":271,"line_end":271,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6521915,"byte_end":6521927,"line_start":277,"line_end":277,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6522134,"byte_end":6522146,"line_start":287,"line_end":287,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6522541,"byte_end":6522553,"line_start":301,"line_end":301,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6522833,"byte_end":6522845,"line_start":311,"line_end":311,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536785,"byte_end":6536805,"line_start":410,"line_end":410,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6540167,"byte_end":6540187,"line_start":518,"line_end":518,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6541067,"byte_end":6541087,"line_start":549,"line_end":549,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542460,"byte_end":6542480,"line_start":594,"line_end":594,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542573,"byte_end":6542580,"line_start":602,"line_end":602,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552179,"byte_end":6552186,"line_start":943,"line_end":943,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552312,"byte_end":6552337,"line_start":951,"line_end":951,"column_start":21,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552495,"byte_end":6552520,"line_start":957,"line_end":957,"column_start":23,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552655,"byte_end":6552680,"line_start":963,"line_end":963,"column_start":19,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553647,"byte_end":6553657,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6556163,"byte_end":6556173,"line_start":103,"line_end":103,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6559578,"byte_end":6559588,"line_start":182,"line_end":182,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6559881,"byte_end":6559891,"line_start":194,"line_end":194,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560196,"byte_end":6560211,"line_start":209,"line_end":209,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560493,"byte_end":6560508,"line_start":218,"line_end":218,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560625,"byte_end":6560640,"line_start":224,"line_end":224,"column_start":28,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/lib.rs","byte_start":455,"byte_end":460,"line_start":21,"line_end":21,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/mod.rs","byte_start":6485606,"byte_end":6485622,"line_start":30,"line_end":30,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":342}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486085,"byte_end":6486095,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":453},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486246,"byte_end":6486256,"line_start":18,"line_end":18,"column_start":18,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":453},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/bytes_codec.rs","byte_start":6486576,"byte_end":6486586,"line_start":32,"line_end":32,"column_start":18,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":453},"to":{"krate":0,"index":45}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6495754,"byte_end":6495758,"line_start":46,"line_end":46,"column_start":28,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":727},"to":{"krate":0,"index":80}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6496029,"byte_end":6496035,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6497336,"byte_end":6497342,"line_start":88,"line_end":88,"column_start":12,"column_end":18},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501558,"byte_end":6501564,"line_start":196,"line_end":196,"column_start":23,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":772},"to":{"krate":18,"index":68}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6501826,"byte_end":6501832,"line_start":208,"line_end":208,"column_start":27,"column_end":33},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":772},"to":{"krate":31,"index":9}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6502610,"byte_end":6502616,"line_start":233,"line_end":233,"column_start":27,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":772},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6502976,"byte_end":6502980,"line_start":248,"line_end":248,"column_start":27,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":727},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6503118,"byte_end":6503122,"line_start":254,"line_end":254,"column_start":33,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":727},"to":{"krate":1,"index":3044}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6503329,"byte_end":6503333,"line_start":264,"line_end":264,"column_start":37,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":727},"to":{"krate":16,"index":215}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6503728,"byte_end":6503732,"line_start":278,"line_end":278,"column_start":43,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":727},"to":{"krate":16,"index":186}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6504013,"byte_end":6504017,"line_start":288,"line_end":288,"column_start":29,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":727},"to":{"krate":1,"index":3020}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6504234,"byte_end":6504238,"line_start":298,"line_end":298,"column_start":39,"column_end":43},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":727},"to":{"krate":16,"index":271}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6504767,"byte_end":6504771,"line_start":316,"line_end":316,"column_start":33,"column_end":37},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":727},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6505143,"byte_end":6505147,"line_start":329,"line_end":329,"column_start":33,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":727},"to":{"krate":0,"index":45}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed.rs","byte_start":6506041,"byte_end":6506052,"line_start":360,"line_end":360,"column_start":12,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507056,"byte_end":6507066,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6507400,"byte_end":6507410,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6508902,"byte_end":6508912,"line_start":99,"line_end":99,"column_start":23,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":686},"to":{"krate":18,"index":68}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6509225,"byte_end":6509235,"line_start":112,"line_end":112,"column_start":27,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":686},"to":{"krate":31,"index":9}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6510325,"byte_end":6510335,"line_start":159,"line_end":159,"column_start":27,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":686},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6511391,"byte_end":6511402,"line_start":199,"line_end":199,"column_start":9,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_read.rs","byte_start":6511920,"byte_end":6511931,"line_start":225,"line_end":225,"column_start":20,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":641},"to":{"krate":18,"index":68}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6514981,"byte_end":6514992,"line_start":37,"line_end":37,"column_start":12,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6515331,"byte_end":6515342,"line_start":53,"line_end":53,"column_start":12,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6516770,"byte_end":6516781,"line_start":95,"line_end":95,"column_start":27,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":600},"to":{"krate":31,"index":9}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6517499,"byte_end":6517510,"line_start":120,"line_end":120,"column_start":23,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":600},"to":{"krate":18,"index":68}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6517842,"byte_end":6517853,"line_start":137,"line_end":137,"column_start":27,"column_end":38},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":600},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6518696,"byte_end":6518708,"line_start":168,"line_end":168,"column_start":9,"column_end":21},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6519050,"byte_end":6519062,"line_start":186,"line_end":186,"column_start":24,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":563},"to":{"krate":31,"index":9}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6521420,"byte_end":6521432,"line_start":258,"line_end":258,"column_start":30,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":563},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6521768,"byte_end":6521780,"line_start":271,"line_end":271,"column_start":24,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6521915,"byte_end":6521927,"line_start":277,"line_end":277,"column_start":30,"column_end":42},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":563},"to":{"krate":1,"index":3044}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6522134,"byte_end":6522146,"line_start":287,"line_end":287,"column_start":34,"column_end":46},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":563},"to":{"krate":16,"index":215}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6522541,"byte_end":6522553,"line_start":301,"line_end":301,"column_start":40,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":563},"to":{"krate":16,"index":186}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/framed_write.rs","byte_start":6522833,"byte_end":6522845,"line_start":311,"line_end":311,"column_start":25,"column_end":37},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":563},"to":{"krate":0,"index":80}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6536785,"byte_end":6536805,"line_start":410,"line_end":410,"column_start":6,"column_end":26},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6540167,"byte_end":6540187,"line_start":518,"line_end":518,"column_start":18,"column_end":38},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":505},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6541067,"byte_end":6541087,"line_start":549,"line_end":549,"column_start":18,"column_end":38},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":505},"to":{"krate":0,"index":45}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542460,"byte_end":6542480,"line_start":594,"line_end":594,"column_start":18,"column_end":38},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":505},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6542573,"byte_end":6542580,"line_start":602,"line_end":602,"column_start":6,"column_end":13},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":493},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552179,"byte_end":6552186,"line_start":943,"line_end":943,"column_start":18,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":493},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552312,"byte_end":6552337,"line_start":951,"line_end":951,"column_start":21,"column_end":46},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":364},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552495,"byte_end":6552520,"line_start":957,"line_end":957,"column_start":23,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":364},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/length_delimited.rs","byte_start":6552655,"byte_end":6552680,"line_start":963,"line_end":963,"column_start":19,"column_end":44},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":364},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6553647,"byte_end":6553657,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6556163,"byte_end":6556173,"line_start":103,"line_end":103,"column_start":18,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":521},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6559578,"byte_end":6559588,"line_start":182,"line_end":182,"column_start":18,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":521},"to":{"krate":0,"index":45}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6559881,"byte_end":6559891,"line_start":194,"line_end":194,"column_start":18,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":521},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560196,"byte_end":6560211,"line_start":209,"line_end":209,"column_start":23,"column_end":38},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":555},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560493,"byte_end":6560508,"line_start":218,"line_end":218,"column_start":26,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":555},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/elton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-util-0.2.0/src/codec/lines_codec.rs","byte_start":6560625,"byte_end":6560640,"line_start":224,"line_end":224,"column_start":28,"column_end":43},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":555},"to":{"krate":1,"index":1642}}]}