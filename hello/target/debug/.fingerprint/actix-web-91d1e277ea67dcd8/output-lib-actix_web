{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n\nThis error occurs when the compiler is unable to infer the concrete type of a\nvariable. It can occur in several cases, the most common being a mismatch\nbetween two types: the type the author explicitly assigned, and the type the\ncompiler inferred.\n"},"level":"error","spans":[{"file_name":"/Users/elton/.cargo/git/checkouts/actix-web-02c803d355aed967/4e32159/src/test.rs","byte_start":32001,"byte_end":32040,"line_start":1009,"line_end":1009,"column_start":9,"column_end":48,"is_primary":true,"text":[{"text":"        connect.await.map(|(_, framed)| framed)","highlight_start":9,"highlight_end":48}],"label":"expected struct `actix_codec::Framed`, found struct `actix_codec::framed::Framed`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::result::Result<actix_codec::Framed<_, actix_http::ws::Codec>, _>`\n   found enum `std::result::Result<actix_codec::framed::Framed<awc::BoxedSocket, actix_http::ws::Codec>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `actix_codec` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/elton/.cargo/git/checkouts/actix-web-02c803d355aed967/4e32159/src/test.rs:1009:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1009\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        connect.await.map(|(_, framed)| framed)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `actix_codec::Framed`, found struct `actix_codec::framed::Framed`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `std::result::Result<actix_codec::\u001b[0m\u001b[0m\u001b[1mFramed<_, actix_http::ws::Codec>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m                found enum `std::result::Result<actix_codec::\u001b[0m\u001b[0m\u001b[1mframed::Framed<awc::BoxedSocket, actix_http::ws::Codec>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `actix_codec` are being used?\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
